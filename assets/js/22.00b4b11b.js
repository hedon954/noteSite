(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{381:function(t,e,a){"use strict";a.r(e);var o=a(44),r=Object(o.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod"}},[t._v("#")]),t._v(" Pod")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("Pod")]),t._v(" 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。")])]),t._v(" "),a("h2",{attrs:{id:"一、使用-pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、使用-pod"}},[t._v("#")]),t._v(" 一、使用 Pod")]),t._v(" "),a("p",[t._v("通常不需要直接创建 Pod，甚至单实例 Pod。 相反，我们会使用诸如 "),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deployment"),a("OutboundLink")],1),t._v(" 或 "),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/workloads/controllers/job/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Job"),a("OutboundLink")],1),t._v("这类工作负载资源来创建 Pod。如果 Pod 需要跟踪状态， 可以考虑 "),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/workloads/controllers/statefulset/",target:"_blank",rel:"noopener noreferrer"}},[t._v("StatefulSet"),a("OutboundLink")],1),t._v(" 资源。")]),t._v(" "),a("p",[t._v("Kubernetes 集群中的 Pod 主要有两种用法：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("运行单个容器的 Pod")]),t._v('。"每个 Pod 一个容器"模型是最常见的 Kubernetes 用例； 在这种情况下，可以将 Pod 看作单个容器的包装器，并且 Kubernetes 直接管理 Pod，而不是容器。')])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("运行多个协同工作的容器的 Pod")]),t._v("。 Pod 可能封装由多个紧密耦合且需要共享资源的共处容器组成的应用程序。 这些位于同一位置的容器可能形成单个内聚的服务单元 —— 一个容器将文件从共享卷提供给公众， 而另一个单独的“边车”（sidecar）容器则刷新或更新这些文件。 Pod 将这些容器和存储资源打包为一个可管理的实体。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("说明：")]),t._v(" 将多个并置、同管的容器组织到一个 Pod 中是一种相对高级的使用场景。 只有在一些场景中，容器之间紧密关联时你才应该使用这种模式。")])])])]),t._v(" "),a("p",[t._v("每个 Pod 都旨在运行给定应用程序的单个实例。如果希望横向扩展应用程序（例如，运行多个实例 以提供更多的资源），则应该使用多个 Pod，每个实例使用一个 Pod。 在 Kubernetes 中，这通常被称为 "),a("em",[t._v("副本（Replication）")]),t._v("。 通常使用一种工作负载资源及其控制器]来创建和管理一组 Pod 副本。")]),t._v(" "),a("p",[a("strong",[t._v("Pod 如何管理多个容器：")])]),t._v(" "),a("p",[t._v("Pod 被设计成支持形成内聚服务单元的多个协作过程（形式为容器）。 Pod 中的容器被自动安排到集群中的同一物理机或虚拟机上，并可以一起进行调度。 容器之间可以共享资源和依赖、彼此通信、协调何时以及何种方式终止自身。")]),t._v(" "),a("p",[t._v("例如，你可能有一个容器，为共享卷中的文件提供 Web 服务器支持，以及一个单独的 “sidecar（挂斗）”容器负责从远端更新这些文件，如下图所示：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNgy1grt64hdq7mj30no0oytbs.jpg",alt:"image-20210624105451272"}}),t._v(" "),a("p",[t._v("有些 Pod 具有 "),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-init-container",target:"_blank",rel:"noopener noreferrer"}},[t._v("Init 容器"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-app-container",target:"_blank",rel:"noopener noreferrer"}},[t._v("应用容器"),a("OutboundLink")],1),t._v("。 Init 容器会在启动应用容器之前运行并完成。")]),t._v(" "),a("p",[t._v("Pod 天生地为其成员容器提供了两种共享资源："),a("strong",[t._v("网络")]),t._v("和"),a("strong",[t._v("存储")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"二、pod-控制器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、pod-控制器"}},[t._v("#")]),t._v(" 二、Pod 控制器")]),t._v(" "),a("p",[t._v("你可以使用工作负载资源来创建和管理多个 Pod。 资源的控制器能够处理副本的管理、上线，并在 Pod 失效时提供自愈能力。 例如，如果一个节点失败，控制器注意到该节点上的 Pod 已经停止工作， 就可以创建替换性的 Pod。调度器会将替身 Pod 调度到一个健康的节点执行。")]),t._v(" "),a("p",[t._v("下面是一些管理一个或者多个 Pod 的工作负载资源的示例：")]),t._v(" "),a("ul",[a("li",[t._v("Deployment")]),t._v(" "),a("li",[t._v("StatefulSet")]),t._v(" "),a("li",[t._v("DaemonSet")])]),t._v(" "),a("h2",{attrs:{id:"三、pod-模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、pod-模板"}},[t._v("#")]),t._v(" 三、Pod 模板")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/workloads/",target:"_blank",rel:"noopener noreferrer"}},[t._v("负载"),a("OutboundLink")],1),t._v("资源的控制器通常使用 "),a("em",[t._v("Pod 模板（Pod Template）")]),t._v(" 来替你创建 Pod 并管理它们。")]),t._v(" "),a("p",[t._v("Pod 模板是包含在工作负载对象中的规范，用来创建 Pod。这类负载资源包括"),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deployment"),a("OutboundLink")],1),t._v("、 "),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/workloads/controllers/job/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Job"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/workloads/controllers/daemonset/",target:"_blank",rel:"noopener noreferrer"}},[t._v("DaemonSets"),a("OutboundLink")],1),t._v("等。")]),t._v(" "),a("p",[t._v("工作负载的控制器会使用负载对象中的 "),a("code",[t._v("PodTemplate")]),t._v(" 来生成实际的 Pod。 "),a("code",[t._v("PodTemplate")]),t._v("是你用来运行应用时指定的负载资源的目标状态的一部分。")]),t._v(" "),a("p",[t._v("下面的示例是一个简单的 Job 的清单，其中的 "),a("code",[t._v("template")]),t._v(" 指示启动一个容器。 该 Pod 中的容器会打印一条消息之后暂停。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" batch/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Job\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hello\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里是 Pod 模版")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hello\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" busybox\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sh'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'echo \"Hello, Kubernetes!\" && sleep 3600'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restartPolicy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" OnFailure\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以上为 Pod 模版")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("修改 Pod 模版或者切换到新的 Pod 模版都不会对已经存在的 Pod 起作用。 Pod 不会直接收到模版的更新。相反， 新的 Pod 会被创建出来，与更改后的 Pod 模版匹配。")])]),t._v(" "),a("h2",{attrs:{id:"四、pod-更新与替换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、pod-更新与替换"}},[t._v("#")]),t._v(" 四、Pod 更新与替换")]),t._v(" "),a("p",[t._v("正如前面章节所述，当某工作负载的 Pod 模板被改变时，控制器会基于更新的模板 创建新的 Pod 对象而不是对现有 Pod 执行更新或者修补操作。")]),t._v(" "),a("p",[t._v("Kubernetes 并不禁止你直接管理 Pod。对运行中的 Pod 的某些字段执行就地更新操作 还是可能的。不过，类似 "),a("a",{attrs:{href:"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#patch-pod-v1-core",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("patch")]),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#replace-pod-v1-core",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("replace")]),a("OutboundLink")],1),t._v(" 这类更新操作有一些限制：")]),t._v(" "),a("ul",[a("li",[t._v("Pod 的绝大多数元数据都是不可变的。例如，你不可以改变其 "),a("code",[t._v("namespace")]),t._v("、"),a("code",[t._v("name")]),t._v("、"),a("code",[t._v("uid")]),t._v(" 或者 "),a("code",[t._v("creationTimestamp")]),t._v(" 字段；"),a("code",[t._v("generation")]),t._v(" 字段是比较特别的，如果更新 该字段，只能增加字段取值而不能减少。")]),t._v(" "),a("li",[t._v("如果 "),a("code",[t._v("metadata.deletionTimestamp")]),t._v(" 已经被设置，则不可以向 "),a("code",[t._v("metadata.finalizers")]),t._v(" 列表中添加新的条目。")]),t._v(" "),a("li",[t._v("Pod 更新不可以改变除 "),a("code",[t._v("spec.containers[*].image")]),t._v("、"),a("code",[t._v("spec.initContainers[*].image")]),t._v("、"),a("code",[t._v("spec.activeDeadlineSeconds")]),t._v(" 或 "),a("code",[t._v("spec.tolerations")]),t._v(" 之外的字段。 对于 "),a("code",[t._v("spec.tolerations")]),t._v("，你只被允许添加新的条目到其中。")]),t._v(" "),a("li",[t._v("在更新"),a("code",[t._v("spec.activeDeadlineSeconds")]),t._v(" 字段时，以下两种更新操作是被允许的：\n"),a("ol",[a("li",[t._v("如果该字段尚未设置，可以将其设置为一个正数；")]),t._v(" "),a("li",[t._v("如果该字段已经设置为一个正数，可以将其设置为一个更小的、非负的整数。")])])])]),t._v(" "),a("h2",{attrs:{id:"五、pod-生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、pod-生命周期"}},[t._v("#")]),t._v(" 五、Pod 生命周期")]),t._v(" "),a("h3",{attrs:{id:"_1-pod-阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-pod-阶段"}},[t._v("#")]),t._v(" 1. Pod 阶段")]),t._v(" "),a("p",[t._v("Pod 的 "),a("code",[t._v("status")]),t._v(" 字段是一个 "),a("a",{attrs:{href:"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#podstatus-v1-core",target:"_blank",rel:"noopener noreferrer"}},[t._v("PodStatus"),a("OutboundLink")],1),t._v(" 对象，其中包含一个 "),a("code",[t._v("phase")]),t._v(" 字段。")]),t._v(" "),a("p",[t._v("Pod 的阶段（Phase）是 Pod 在其生命周期中所处位置的简单宏观概述。 该阶段并不是对容器或 Pod 状态的综合汇总，也不是为了成为完整的状态机。")]),t._v(" "),a("p",[t._v("Pod 阶段的数量和含义是严格定义的。 除了本文档中列举的内容外，不应该再假定 Pod 有其他的 "),a("code",[t._v("phase")]),t._v(" 值。")]),t._v(" "),a("p",[t._v("下面是 "),a("code",[t._v("phase")]),t._v(" 可能的值：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("取值")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("Pending")]),t._v("（悬决）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Pod 已被 Kubernetes 系统接受，但有一个或者多个容器尚未创建亦未运行。此阶段包括等待 Pod 被调度的时间和通过网络下载镜像的时间，")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("Running")]),t._v("（运行中）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Pod 已经绑定到了某个节点，Pod 中所有的容器都已被创建。至少有一个容器仍在运行，或者正处于启动或重启状态。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("Succeeded")]),t._v("（成功）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Pod 中的所有容器都已成功终止，并且不会再重启。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("Failed")]),t._v("（失败）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Pod 中的所有容器都已终止，并且至少有一个容器是因为失败终止。也就是说，容器以非 0 状态退出或者被系统终止。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("Unknown")]),t._v("（未知）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("因为某些原因无法取得 Pod 的状态。这种情况通常是因为与 Pod 所在主机通信失败。")])])])]),t._v(" "),a("p",[t._v("如果某节点死掉或者与集群中其他节点失联，Kubernetes 会实施一种策略，将失去的节点上运行的所有 Pod 的 "),a("code",[t._v("phase")]),t._v(" 设置为 "),a("code",[t._v("Failed")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_2-容器状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-容器状态"}},[t._v("#")]),t._v(" 2. 容器状态")]),t._v(" "),a("p",[t._v("Kubernetes 会跟踪 Pod 中每个容器的状态，就像它跟踪 Pod 总体上的"),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase",target:"_blank",rel:"noopener noreferrer"}},[t._v("阶段"),a("OutboundLink")],1),t._v("一样。 你可以使用"),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/containers/container-lifecycle-hooks/",target:"_blank",rel:"noopener noreferrer"}},[t._v("容器生命周期回调"),a("OutboundLink")],1),t._v(" 来在容器生命周期中的特定时间点触发事件。")]),t._v(" "),a("p",[t._v("一旦 Kube Scheduler 将 Pod 分派给某个节点，"),a("code",[t._v("kubelet")]),t._v(" 就通过 Container Runtime 开始为 Pod 创建容器。 容器的状态有三种："),a("code",[t._v("Waiting")]),t._v("（等待）、"),a("code",[t._v("Running")]),t._v("（运行中）和 "),a("code",[t._v("Terminated")]),t._v("（已终止）。")]),t._v(" "),a("p",[t._v("要检查 Pod 中容器的状态，你可以使用：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("kubectl describe pod <pod 名称>\n")])])]),a("h3",{attrs:{id:"_3-容器重启策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-容器重启策略"}},[t._v("#")]),t._v(" 3. 容器重启策略")]),t._v(" "),a("p",[t._v("Pod 的 "),a("code",[t._v("spec")]),t._v(" 中包含一个 "),a("code",[t._v("restartPolicy")]),t._v(" 字段，其可能取值包括 "),a("strong",[t._v("Always")]),t._v("、"),a("strong",[t._v("OnFailure")]),t._v(" 和 "),a("strong",[t._v("Never")]),t._v("。默认值是 Always。")]),t._v(" "),a("p",[a("code",[t._v("restartPolicy")]),t._v(" 适用于 Pod 中的所有容器。"),a("code",[t._v("restartPolicy")]),t._v(" 仅针对同一节点上 "),a("code",[t._v("kubelet")]),t._v("的容器重启动作。当 Pod 中的容器退出时，"),a("code",[t._v("kubelet")]),t._v(" 会按指数回退 方式计算重启的延迟（10s、20s、40s、...），其最长延迟为 5 分钟。 一旦某容器执行了 10 分钟并且没有出现问题，"),a("code",[t._v("kubelet")]),t._v(" 对该容器的重启回退计时器执行重置操作。")]),t._v(" "),a("h3",{attrs:{id:"_4-pod-状况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-pod-状况"}},[t._v("#")]),t._v(" 4. Pod 状况")]),t._v(" "),a("p",[t._v("Pod 有一个 "),a("code",[t._v("PodStatus")]),t._v(" 对象，其中包含一个 "),a("a",{attrs:{href:"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#podcondition-v1-core",target:"_blank",rel:"noopener noreferrer"}},[t._v("PodConditions"),a("OutboundLink")],1),t._v(" 数组。Pod 可能通过也可能未通过其中的一些状况测试。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("PodScheduled")]),t._v("：Pod 已经被调度到某节点；")]),t._v(" "),a("li",[a("code",[t._v("ContainersReady")]),t._v("：Pod 中所有容器都已就绪；")]),t._v(" "),a("li",[a("code",[t._v("Initialized")]),t._v("：所有的 "),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/workloads/pods/init-containers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Init 容器"),a("OutboundLink")],1),t._v(" 都已成功启动；")]),t._v(" "),a("li",[a("code",[t._v("Ready")]),t._v("：Pod 可以为请求提供服务，并且应该被添加到对应服务的负载均衡池中。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("字段名称")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("type")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Pod 状况的名称")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("status")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('表明该状况是否适用，可能的取值有 "'),a("code",[t._v("True")]),t._v('", "'),a("code",[t._v("False")]),t._v('" 或 "'),a("code",[t._v("Unknown")]),t._v('"')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("lastProbeTime")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("上次探测 Pod 状况时的时间戳")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("lastTransitionTime")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Pod 上次从一种状态转换到另一种状态时的时间戳")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("reason")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("机器可读的、驼峰编码（UpperCamelCase）的文字，表述上次状况变化的原因")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("message")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("人类可读的消息，给出上次状态转换的详细信息")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);