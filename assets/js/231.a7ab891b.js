(window.webpackJsonp=window.webpackJsonp||[]).push([[231],{641:function(_,v,t){"use strict";t.r(v);var a=t(47),s=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"_1-软件测试基础知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-软件测试基础知识"}},[_._v("#")]),_._v(" 1. 软件测试基础知识")]),_._v(" "),t("h2",{attrs:{id:"_1-1-软件的概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-软件的概念"}},[_._v("#")]),_._v(" 1.1 软件的概念")]),_._v(" "),t("p",[_._v("软件是计算机系统中与硬件相互依存的另一部分，它是包括程序、数据及其相关文档的完整集合。")]),_._v(" "),t("ul",[t("li",[_._v("程序：事先设计的功能和性能要求执行的指令序列")]),_._v(" "),t("li",[_._v("数据：使程序能正常操纵信息的数据结构")]),_._v(" "),t("li",[_._v("文档：与程序开发、维护和使用有关的图文材料")])]),_._v(" "),t("h2",{attrs:{id:"_1-2-软件十大特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-软件十大特性"}},[_._v("#")]),_._v(" 1.2 软件十大特性")]),_._v(" "),t("ul",[t("li",[_._v("形态特性：软件是无形的、不可见的逻辑实体。")]),_._v(" "),t("li",[_._v("智能特性：软件是复杂的智力产品，它的开发凝聚了人们的大量脑力劳动。")]),_._v(" "),t("li",[_._v("开发特性：软件开发中包含了相当份量的个体劳动，使得这一大规模知识型工作充满了个人行为和个人因素。")]),_._v(" "),t("li",[_._v("质量特性：软件是由人编写的，由于其开发特性存在，所以不存在完全没有缺陷的软件。")]),_._v(" "),t("li",[_._v("生产特性：与硬件和传统的制造业产品的生产完全不同，软件一旦设计开发出来，如果需要提供多个用户，它的复制十分简单，其成本也极为有限。")]),_._v(" "),t("li",[_._v("管理特性：由于上面的特性存在，所以软件过程中的管理显得更为重要，相比传统行业，也更为独特。")]),_._v(" "),t("li",[_._v("环境特性：软件的开发和运行都离不开相关的计算机系统环境，包括支持它的开发和运行的相关硬件和软件。软件对于计算机系统的环境有着不可摆脱的依赖性。")]),_._v(" "),t("li",[_._v("维护特性：软件投入使用以后需要进行维护，但这种维护与传统产业产品的维护概念有着很大差别，维护体现在升级、优化、功能更新等方面，甚至可以全盘重构。")]),_._v(" "),t("li",[_._v("废弃特性：与硬件不同，软件并不是由于被“用坏”而被废弃的。")]),_._v(" "),t("li",[_._v("应用特性：软件的应用极为广泛，如今它已渗入国民经济和国防的各个领域，现已成为信息产业、先进制造业和现代服务业的核心，占据了无可取代的地位。")])]),_._v(" "),t("h2",{attrs:{id:"_1-3-软件的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-软件的分类"}},[_._v("#")]),_._v(" 1.3 软件的分类")]),_._v(" "),t("ul",[t("li",[_._v("系统软件：负责计算机系统中各种独立的硬件，使得它们可以协调工作。\n"),t("ul",[t("li",[_._v("服务型程序")]),_._v(" "),t("li",[_._v("语言程序")]),_._v(" "),t("li",[_._v("操作系统")]),_._v(" "),t("li",[_._v("数据库管理系统")])])]),_._v(" "),t("li",[_._v("应用软件：为了某种特定的用途而被开发的软件。")])]),_._v(" "),t("h2",{attrs:{id:"_1-4-软件生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-软件生命周期"}},[_._v("#")]),_._v(" 1.4 软件生命周期")]),_._v(" "),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("graph LR\n1[问题定义] --\x3e 2[可行性研究] --\x3e 3[需求分析] --\x3e 4[概要设计] --\x3e 5[详细设计] --\x3e 6[编码和单元测试] --\x3e 7[综合测试] --\x3e 8[软件维护]\n")])])]),t("h2",{attrs:{id:"_1-5-软件开发模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-软件开发模型"}},[_._v("#")]),_._v(" 1.5 软件开发模型")]),_._v(" "),t("h3",{attrs:{id:"_1-5-1-边做边改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-边做边改"}},[_._v("#")]),_._v(" 1.5.1 边做边改")]),_._v(" "),t("p",[_._v("存在于早起的小规模软件开发中，一边做一边修改，直至软件开发完成。")]),_._v(" "),t("h3",{attrs:{id:"_1-5-2-瀑布模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-瀑布模式"}},[_._v("#")]),_._v(" 1.5.2 瀑布模式")]),_._v(" "),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("graph LR\n1[计划] --\x3e 2[需求分析] --\x3e 3[设计] --\x3e 4[编码] --\x3e 5[测试] --\x3e 6[运行维护]\n")])])]),t("p",[_._v("优点：")]),_._v(" "),t("ul",[t("li",[_._v("强调开发的阶段性；")]),_._v(" "),t("li",[_._v("强调早期计划及需求调查；")]),_._v(" "),t("li",[_._v("强调产品测试；")])]),_._v(" "),t("p",[_._v("缺点：")]),_._v(" "),t("ul",[t("li",[_._v("串行，无法回头；")]),_._v(" "),t("li",[_._v("测试介入晚，导致项目前期的问题到后面才发现，失去了错误及时修正的机会；")]),_._v(" "),t("li",[_._v("不支持项目频繁变动；")])]),_._v(" "),t("h3",{attrs:{id:"_1-5-3-原型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-3-原型模式"}},[_._v("#")]),_._v(" 1.5.3 原型模式")]),_._v(" "),t("p",[_._v("快速原型模型对于许多需求不够明确的项目，比较适合采用该模型。它采用了一种动态定义需求的方法，通过快速地建立个能够反映用户主要需求的软件原型，让用户在计算机上使用它，了解其概要，再根据反馈的结果进行修改，因此能够充分体现用户的参与和决策。原型化人员对原型的实施很重要，衡量他们的重要标准是能否从用户的模糊描述中快速地获取实际的需求。")]),_._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://hedonspace.oss-cn-beijing.aliyuncs.com/img2/e6c9d24egy1h3x82epfuaj20dw0i4mxo.jpg",alt:"img"}}),_._v(" "),t("p",[_._v("优点：")]),_._v(" "),t("ul",[t("li",[_._v("实现客户与系统的交互；")]),_._v(" "),t("li",[_._v("进一步细化待开发软件的需求；")]),_._v(" "),t("li",[_._v("开发人员可以确定客户的真正需求是什么；")])]),_._v(" "),t("p",[_._v("缺点：")]),_._v(" "),t("ul",[t("li",[_._v("不利于开发人员对产品进行扩展；")]),_._v(" "),t("li",[_._v("快速建立的系统结构加上连续的修改可能导致产品质量比较底下；")])]),_._v(" "),t("h3",{attrs:{id:"_1-5-4-增量模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-4-增量模型"}},[_._v("#")]),_._v(" 1.5.4 增量模型")]),_._v(" "),t("p",[_._v("增量模型（演化模型）也是一种原型化开发方法，但与快速原型模型略有不同。在快速原型模型中，原型的用途是获知用户的真正需求，一旦需求确定了，原型即被抛弃。而增量模型的开发过程，则是从初始模型逐步演化为最终软件产品的渐进过程。也就是说，快速原型模型是一种“抛弃式”的原型化方法，而增量模型则是一种“渐进式”的原型化方法。")]),_._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://hedonspace.oss-cn-beijing.aliyuncs.com/img2/e6c9d24egy1h3x86izf9ij21230j8dh7.jpg",alt:"img"}}),_._v(" "),t("p",[_._v("优点：")]),_._v(" "),t("ul",[t("li",[_._v("较短的时间内向用户提交可完成的有用工作产品，从而保证用户有充裕的时间学习适应产品；")])]),_._v(" "),t("p",[_._v("缺点：")]),_._v(" "),t("ul",[t("li",[_._v("软件结构必须开放，能够方便向现有产品加入新构件。但也正是这样的一个要求也称为了增量模型开发的一个缺点，即在软件开发的过程中，向现有产品中加入新构件是十分不便的。")])]),_._v(" "),t("h3",{attrs:{id:"_1-5-5-螺旋模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-5-螺旋模式"}},[_._v("#")]),_._v(" 1.5.5 螺旋模式")]),_._v(" "),t("p",[_._v("螺旋模型结合瀑布模型和增量模型的优点，最主要的特点在于加入了风险分析。它是由制订计划、风险分析、实施工程、客户评估这循环组成的， 它最初从概念项目开始策一个螺旋， 这种开发模型将风险分析作为个单独的阶段来做，比较适合风险救大的大中型的软件开发项目。")]),_._v(" "),t("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://hedonspace.oss-cn-beijing.aliyuncs.com/img2/e6c9d24egy1h3x85dbxqpj20jv0etab3.jpg",alt:"img"}}),_._v(" "),t("p",[_._v("优点：")]),_._v(" "),t("ul",[t("li",[_._v("对于大型软件开发项目具有较好的风险控制；")])]),_._v(" "),t("p",[_._v("缺点：")]),_._v(" "),t("ul",[t("li",[_._v("开发人员需要有风险评估的经验，契约开发通常需要指定过程模型和发布产品；")]),_._v(" "),t("li",[_._v("过于强调风险分析，但要求许多客户接受并相信这种分析，是不容易的；")])]),_._v(" "),t("h3",{attrs:{id:"_1-5-6-敏捷开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-6-敏捷开发"}},[_._v("#")]),_._v(" 1.5.6 敏捷开发")]),_._v(" "),t("p",[_._v("敏捷开发是一种以人为核心、迭代、循序渐进的开发方法。")]),_._v(" "),t("p",[_._v("敏捷单从字面意思来理解是：指反应（多指动作或言行）迅速快捷。**这里提到的敏捷是一种思想，一种态度，倡导简单设计，快速交付，价值导向，响应变化。**这里的价值需要注意一下，一定是用户能感知到的。敏捷是促进变革并响应变化以便在动荡的商业环境中创造利润的能力，是平衡稳定性和灵活性的能力。")]),_._v(" "),t("p",[_._v("核心思想：")]),_._v(" "),t("ul",[t("li",[_._v("**快速：**以最快的速度交付，保持这种优势就可以比别人更有市场。")]),_._v(" "),t("li",[_._v("**高效：**敏捷团队成员组织高效协同，保障持续交付价值。")]),_._v(" "),t("li",[_._v("**试错：**通过低成本的不断的试错，找到客户真正的需求，才是占领市场的关键，也是必胜之道。")])]),_._v(" "),t("p",[_._v("人员组织架构：")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("产品负责人")]),_._v("，一般由产品经理来担任，作为项目的第一负责人，产品经理要负责产品的方向，并对最终交付的产品负责。其详细职责包括：他需要将待办事项里的需求按客户价值进行排序，还要从客户那里获得产品反馈并告诉团队应该如何改善。产品负责人与团队开展日常合作，参加迭代计划会、每日晨会、评审会与回顾会等，并且为将要开发或交付的下一个版本设定方向。")]),_._v(" "),t("li",[t("strong",[_._v("敏捷教练")]),_._v("，也被称为 Scrum 主管、团队教练或者团队促进者，一般情况下，由项目经理、研发经理或者质量经理来担任，在所有的敏捷团队中我们都需要有这个角色。敏捷教练应该具备这些能力：\n"),t("ul",[t("li",[t("strong",[_._v("敏捷专家")]),_._v("，具备丰富的知识和实践经验，能够带领团队顺利完成敏捷转型。")]),_._v(" "),t("li",[t("strong",[_._v("障碍清除者")]),_._v("，在敏捷实践过程中，能够帮助团队清除一些障碍，让项目如期交付。")]),_._v(" "),t("li",[t("strong",[_._v("仆人式领导")]),_._v("，能够将领导力从命令式转向服务式，帮助团队快速成长。")]),_._v(" "),t("li",[t("strong",[_._v("变革的引领者")]),_._v("，具有感染力，能够身先士卒，带领团队不断拥抱变化。")])])]),_._v(" "),t("li",[t("strong",[_._v("团队成员")]),_._v("，敏捷中的团队通常指跨职能团队，这是敏捷实践中重要的一环。跨职能团队指打破职能界限，将团队中持续交付产品所需的所有角色，按照项目在空间上聚集在一起，大家共同负责该项目的 KPI，比如设计人员、开发人员、测试人员以及其他所需角色。跨职能团队往往能够在更短的时间，独立地交付高质量的产品，所以我们要注重建立跨职能团队。")])]),_._v(" "),t("p",[_._v("流程：迭代开发、增量开发")]),_._v(" "),t("ul",[t("li",[_._v("需求分析（requirements analysis）")]),_._v(" "),t("li",[_._v("设计（design）")]),_._v(" "),t("li",[_._v("编码（coding）")]),_._v(" "),t("li",[_._v("测试（testing）")]),_._v(" "),t("li",[_._v("部署和评估（deployment / evaluation）")])]),_._v(" "),t("p",[_._v("优点：")]),_._v(" "),t("ul",[t("li",[_._v("短周期开发；")]),_._v(" "),t("li",[_._v("增量开发；")]),_._v(" "),t("li",[_._v("由程序员和测试人员编写的自动化测试来监控开发进度；")]),_._v(" "),t("li",[_._v("通过口头沟通、测试和源代码来交流系统的结构和意图，减少了对文档的依赖；")]),_._v(" "),t("li",[_._v("测试先行，编写代码之前先写测试代码；")])]),_._v(" "),t("p",[_._v("缺点：")]),_._v(" "),t("ul",[t("li",[_._v("团队的组建较难，人员素质要求较高；")]),_._v(" "),t("li",[_._v("对测试员要求完全掌握各种脚本编程语言，能执行单元测试、自动化测试；")])]),_._v(" "),t("p",[_._v("十二条原则：")]),_._v(" "),t("ul",[t("li",[_._v("通过早期和持续交付有价值的软件，实现客户满意度。")]),_._v(" "),t("li",[_._v("欢迎不断变化的需求，即使是在项目开发的后期。要善于利用需求变更，帮助客户获得竞争优势。")]),_._v(" "),t("li",[_._v("不断交付可用的软件，周期通常是几周，越短越好。")]),_._v(" "),t("li",[_._v("项目过程中，业务人员与开发人员必须在一起工作。")]),_._v(" "),t("li",[_._v("项目必须围绕那些有内在动力的个人而建立，他们应该受到信任。")]),_._v(" "),t("li",[_._v("面对面交谈是最好的沟通方式。")]),_._v(" "),t("li",[_._v("可用性是衡量进度的主要指标。")]),_._v(" "),t("li",[_._v("提倡可持续的开发，保持稳定的进展速度。")]),_._v(" "),t("li",[_._v("不断关注技术是否优秀，设计是否良好。")]),_._v(" "),t("li",[_._v("简单性至关重要，尽最大可能减少不必要的工作。")]),_._v(" "),t("li",[_._v("最好的架构、要求和设计，来自团队内部自发的认识。")]),_._v(" "),t("li",[_._v("团队要定期反思如何更有效，并相应地进行调整。")])]),_._v(" "),t("h3",{attrs:{id:"_1-5-7-devops"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-7-devops"}},[_._v("#")]),_._v(" 1.5.7 DevOps")]),_._v(" "),t("p",[_._v("DevOps = Development + Operations")]),_._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://hedonspace.oss-cn-beijing.aliyuncs.com/img2/e6c9d24egy1h3x8ke5nfaj20hs0953yv.jpg",alt:"img"}}),_._v(" "),t("p",[_._v("DevOps 是一组过程、方法与系统的统称，用于促进"),t("strong",[_._v("开发")]),_._v("、"),t("strong",[_._v("技术运营")]),_._v("和**质量保障（QA）**部门之间的沟通、协作与整合。")]),_._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://hedonspace.oss-cn-beijing.aliyuncs.com/img2/e6c9d24egy1h3x8kl451aj20f00e9q35.jpg",alt:"img"}}),_._v(" "),t("h2",{attrs:{id:"_1-6-软件开发文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-软件开发文档"}},[_._v("#")]),_._v(" 1.6 软件开发文档")]),_._v(" "),t("ul",[t("li",[_._v("需求分析文档")]),_._v(" "),t("li",[_._v("概要设计文档")]),_._v(" "),t("li",[_._v("详细设计文档")]),_._v(" "),t("li",[_._v("测试设计文档")]),_._v(" "),t("li",[_._v("测试用例")]),_._v(" "),t("li",[_._v("测试报告")])]),_._v(" "),t("h2",{attrs:{id:"_1-7-测试猿媛在软件一生中的职责"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-测试猿媛在软件一生中的职责"}},[_._v("#")]),_._v(" 1.7 测试猿媛在软件一生中的职责")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("编程阶段")]),_._v("：单元测试（白盒测试），开发为主，测试参与")]),_._v(" "),t("li",[t("strong",[_._v("编程开发")]),_._v("-开发联调：集成测试，开发为主")]),_._v(" "),t("li",[t("strong",[_._v("提测")]),_._v("：冒烟测试（自动化为主，手动为辅），测试为主")]),_._v(" "),t("li",[t("strong",[_._v("测试阶段")]),_._v("：系统测试（黑盒功能测试为主，自动化/接口测试为辅），根据项目进行性能、安全测试")]),_._v(" "),t("li",[t("strong",[_._v("验收阶段")]),_._v("：验收测试，测试配合用户或需求")])]),_._v(" "),t("h2",{attrs:{id:"_1-8-软件测试方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-软件测试方法"}},[_._v("#")]),_._v(" 1.8 软件测试方法")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://hedonspace.oss-cn-beijing.aliyuncs.com/img2/e6c9d24egy1h3x8yvz0mpj20u00zhwg5.jpg",alt:"软件测试方法"}})]),_._v(" "),t("p",[_._v("软件生命周期各个阶段对应的测试方法：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th"),_._v(" "),t("th",[_._v("单元测试")]),_._v(" "),t("th",[_._v("集成测试")]),_._v(" "),t("th",[_._v("冒烟测试")]),_._v(" "),t("th",[_._v("系统测试")]),_._v(" "),t("th",[_._v("验收测试")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[_._v("测试阶段")])]),_._v(" "),t("td",[_._v("编码后")]),_._v(" "),t("td",[_._v("单元测试完成后")]),_._v(" "),t("td",[_._v("提测后")]),_._v(" "),t("td",[_._v("冒烟测试通过后")]),_._v(" "),t("td",[_._v("发布前")])]),_._v(" "),t("tr",[t("td",[t("strong",[_._v("测试对象")])]),_._v(" "),t("td",[_._v("最小模块")]),_._v(" "),t("td",[_._v("模块间的接口")]),_._v(" "),t("td",[_._v("整个系统")]),_._v(" "),t("td",[_._v("整个系统")]),_._v(" "),t("td",[_._v("整个系统")])]),_._v(" "),t("tr",[t("td",[t("strong",[_._v("测试人员")])]),_._v(" "),t("td",[_._v("白盒测试或开发")]),_._v(" "),t("td",[_._v("白盒测试或开发")]),_._v(" "),t("td",[_._v("黑河测试")]),_._v(" "),t("td",[_._v("黑河测试")]),_._v(" "),t("td",[_._v("最终用户或需求方")])]),_._v(" "),t("tr",[t("td",[t("strong",[_._v("测试依据")])]),_._v(" "),t("td",[_._v("代码、"),t("br"),_._v("注释、"),t("br"),_._v("详细设计文档")]),_._v(" "),t("td",[_._v("单元测试模块、"),t("br"),_._v("概要设计文档")]),_._v(" "),t("td",[_._v("冒烟测试用例")]),_._v(" "),t("td",[_._v("需求说明文档、"),t("br"),_._v("测试方案、"),t("br"),_._v("测试用例")]),_._v(" "),t("td",[_._v("用户需求、"),t("br"),_._v("验收标准")])]),_._v(" "),t("tr",[t("td",[t("strong",[_._v("测试方法")])]),_._v(" "),t("td",[_._v("白盒测试")]),_._v(" "),t("td",[_._v("黑盒与白盒结合")]),_._v(" "),t("td",[_._v("黑盒测试（手工或自动化结合）")]),_._v(" "),t("td",[_._v("黑盒测试")]),_._v(" "),t("td",[_._v("黑盒测试")])])])]),_._v(" "),t("h2",{attrs:{id:"_1-9-测试常见用语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-测试常见用语"}},[_._v("#")]),_._v(" 1.9 测试常见用语")]),_._v(" "),t("p",[_._v("测试用例（Test Case）：")]),_._v(" "),t("ul",[t("li",[_._v("在测试执行之前设计的一套详细的测试方案，包括测试环境、测试步骤、测试数据和预期结果。")])]),_._v(" "),t("p",[_._v("冒烟测试（Smoke Testing）：")]),_._v(" "),t("ul",[t("li",[_._v("在对一个新版本进行系统大规模地测试之前，先验证一下软件的基本功能是否实现，是否具备可测试。")])]),_._v(" "),t("p",[_._v("α 测试：")]),_._v(" "),t("ul",[t("li",[_._v("验收测试的一种，指的是由用户、测试人员、开发人员等共同参与的内部测试。")])]),_._v(" "),t("p",[_._v("β 测试：")]),_._v(" "),t("ul",[t("li",[_._v("验收测试的一种，指的是内测后的公测，即完全交给最终用户测试。")])]),_._v(" "),t("h2",{attrs:{id:"_1-10-软件测试模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-软件测试模型"}},[_._v("#")]),_._v(" 1.10 软件测试模型")]),_._v(" "),t("h3",{attrs:{id:"_1-10-1-v-模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-1-v-模型"}},[_._v("#")]),_._v(" 1.10.1 V 模型")]),_._v(" "),t("p",[_._v("V 模型是我们熟知的瀑布模型的一种改进，瀑布模型将软件生命周期分为计划、分析、设计、编码、测试和维护六个阶段，由于早起的错误可能要等到开发后期的测试阶段才能发现，所以可能带来严重的后果。")]),_._v(" "),t("p",[_._v("V 模型就是在这点改进了瀑布模型，在软件开发的生存期，开发活动和测试活动几乎同时开始，这两个并行的动态过程就会极大的减少 bug 和 error 出现的几率。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://hedonspace.oss-cn-beijing.aliyuncs.com/img2/e6c9d24egy1h3xjs0uom0j21j00rcwgm.jpg",alt:"image-20220706215334896"}})]),_._v(" "),t("h3",{attrs:{id:"_1-10-2-w-模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-2-w-模型"}},[_._v("#")]),_._v(" 1.10.2 W 模型")]),_._v(" "),t("p",[_._v("一些高性能高风险的系统、互联网软件，或一个系统难以被具体模块化的时候，就比较难做成 V 模式所需的各种构件，需要更强调迭代的开发模型或者敏捷开发模型。")]),_._v(" "),t("p",[_._v("W 模型是由 Ⅴ 模型演变而来的，它强调测试应伴随整个软件生命周期。其实 W 模型是个双 V 模型，软件开发是一个 V 模型，而软件测试是与开发同步进行的另一个 V 模型。")]),_._v(" "),t("p",[_._v("W 模型的测试范围不仅包括程序，还包括需求分析、软件设计等前期工作，这样有利于尽早地全面发现问题。但是 W 模型也有自己的局限性，它将软件开发过程分成需求、设计、编码、集成等一系列的串行活动，无法支持迭代、自发性等需要变更调整的项目。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://hedonspace.oss-cn-beijing.aliyuncs.com/img2/e6c9d24egy1h3xjxfmzgnj21ju0lu76r.jpg",alt:"image-20220706215847028"}})]),_._v(" "),t("h3",{attrs:{id:"_1-10-3-h-模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-3-h-模型"}},[_._v("#")]),_._v(" 1.10.3 H 模型")]),_._v(" "),t("p",[_._v("为了解决 V 模型与 W 模型存在的问题，有专家提出了 H 模型，H 模型将测试活动完全独立了出来，形成一个完全独立的流程，这个流程将测试准备活动和测试执行活动清晰地体现出来。测试流程和其他工作流程是并发执行的，只要某一个工作流程的条件成熟就可以开始进行测试。例如在概要设计工作流程上完成一个测试，其过程如下图所示。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://hedonspace.oss-cn-beijing.aliyuncs.com/img2/e6c9d24egy1h3xk19pdw9j212i0c60td.jpg",alt:"image-20220706220228242"}})]),_._v(" "),t("h3",{attrs:{id:"_1-10-4-x-模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-4-x-模型"}},[_._v("#")]),_._v(" 1.10.4 X 模型")]),_._v(" "),t("p",[_._v("X 模型的设计原理是将程序分成多个片段反复迭代测试，然后将多个片段集成再进行选代测试。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://hedonspace.oss-cn-beijing.aliyuncs.com/img2/e6c9d24egy1h3xk7bzw4cj21es0tqgok.jpg",alt:"image-20220706220817885"}})]),_._v(" "),t("p",[_._v("X 模型左边描述的是针对单独程序片段进行的相互分离的编码和测试，多个程序片段进行频繁的交接，在 X 模型的右上部分，将多个片段集成为一个可执行的程序再进行测试。通过集成测试的产品可以进行更大规模的集成，也可以进行封装提交给客户。")]),_._v(" "),t("p",[_._v("在 X 模型的右下部分还定位了探索性测试，它能够帮助有经验的测试人员发现更多测试计划之外的软件错误，但这对测试人员要求会高一些。")]),_._v(" "),t("h3",{attrs:{id:"_1-10-5-敏捷模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-5-敏捷模型"}},[_._v("#")]),_._v(" 1.10.5 敏捷模型")]),_._v(" "),t("p",[_._v("敏捷测试模型强调：")]),_._v(" "),t("ul",[t("li",[_._v("从客户角度进行测试，重点关注迭代测试新功能，不再强调测试阶段；")]),_._v(" "),t("li",[_._v("尽早测试，不间断测试，具备条件即测试；")]),_._v(" "),t("li",[_._v("强调持续反馈；")]),_._v(" "),t("li",[_._v("预防缺陷重于发现缺陷")])]),_._v(" "),t("h2",{attrs:{id:"_1-11-软件测试覆盖率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-软件测试覆盖率"}},[_._v("#")]),_._v(" 1.11 软件测试覆盖率")]),_._v(" "),t("h3",{attrs:{id:"_1-11-1-简单的测试覆盖率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-1-简单的测试覆盖率"}},[_._v("#")]),_._v(" 1.11.1 简单的测试覆盖率")]),_._v(" "),t("ul",[t("li",[_._v("本次测试执行的用例数 / 所有用例数")])]),_._v(" "),t("p",[_._v("上述覆盖率统计建立在认为总用例数编写全面，一般对于大型系统测试要求覆盖率 100%。")]),_._v(" "),t("p",[_._v("覆盖率的审核：抽样验收")]),_._v(" "),t("h3",{attrs:{id:"_1-11-2-基于产品的测试覆盖率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-2-基于产品的测试覆盖率"}},[_._v("#")]),_._v(" 1.11.2 基于产品的测试覆盖率")]),_._v(" "),t("ul",[t("li",[_._v("已测试需求点 / 设计所有需求数")])]),_._v(" "),t("p",[_._v("以产品、需求维度统计，无论大型项目或是小需求迭代都要求覆盖率达到 100%。")]),_._v(" "),t("p",[_._v("覆盖率的审核：抽样验收")]),_._v(" "),t("h3",{attrs:{id:"_1-11-3-基于白盒的测试覆盖率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-3-基于白盒的测试覆盖率"}},[_._v("#")]),_._v(" 1.11.3 基于白盒的测试覆盖率")]),_._v(" "),t("ul",[t("li",[_._v("大多是利用工具来判断语句覆盖：单元测试代码覆盖代码行 / 总代码行")])]),_._v(" "),t("p",[_._v("更多考察研发人员，更多时间要求覆盖达到 80%+")]),_._v(" "),t("p",[_._v("缺陷：覆盖率数据只能代码测试过哪些代码，不能代表是否测试好这些代码，容易遗漏逻辑、判断等场景。")]),_._v(" "),t("h3",{attrs:{id:"_1-11-4-基于自动化的测试覆盖率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-4-基于自动化的测试覆盖率"}},[_._v("#")]),_._v(" 1.11.4 基于自动化的测试覆盖率")]),_._v(" "),t("ul",[t("li",[_._v("自动化覆盖的测试场景（测试用例）/ 所有测试场景（用例）")])]),_._v(" "),t("p",[_._v("80/20 原则：比如用户 80% 的时间在使用 20% 的功能，20% 的工就可以支撑起用户最关键的业务场景，自动化测试的用例选择更着重于这 20% 的核心功能。")]),_._v(" "),t("p",[_._v("自动化测试更着重于回归验证，没必要追求过高的覆盖率，而要考虑用例设计。")]),_._v(" "),t("h2",{attrs:{id:"_1-12-软件测试员必备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-软件测试员必备"}},[_._v("#")]),_._v(" 1.12 软件测试员必备")]),_._v(" "),t("ul",[t("li",[_._v("软件测试基础知识")]),_._v(" "),t("li",[_._v("软件测试流程")]),_._v(" "),t("li",[_._v("测试用例设计方法")]),_._v(" "),t("li",[_._v("兼容性测试 / 易用性测试")]),_._v(" "),t("li",[_._v("缺陷管理")]),_._v(" "),t("li",[_._v("测试工具使用")]),_._v(" "),t("li",[_._v("测试文档编写")])]),_._v(" "),t("h2",{attrs:{id:"_1-13-软件测试原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-软件测试原则"}},[_._v("#")]),_._v(" 1.13 软件测试原则")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("所有的测试都应该追溯到用户需求；")])]),_._v(" "),t("li",[t("p",[_._v("尽早启动测试工作；")])]),_._v(" "),t("li",[t("p",[_._v("Pareto 法则应用于软件测试；")]),_._v(" "),t("blockquote",[t("p",[_._v("Pareto 法则又称 28 效率法则。")]),_._v(" "),t("p",[_._v("测试中的 Pareto 法则是说一半情况下，在分析、设计、实现阶段的复审和测试工作能够发现和避免 80% 的缺陷，而系统测试又能找出其余缺陷的 80%，最后 4% 的缺陷可能只有在用户的大范围、长时间使用后才会暴露出来。")])])]),_._v(" "),t("li",[t("p",[_._v("穷尽测试是不可能的；")])]),_._v(" "),t("li",[t("p",[_._v("杀虫剂怪事；")]),_._v(" "),t("blockquote",[t("p",[_._v("软件测试越多，其对测试的免疫力越强的现象；")]),_._v(" "),t("p",[_._v("多找新角度、新测试程序去测试。")])])]),_._v(" "),t("li",[t("p",[_._v("前进两步，后退一步；")]),_._v(" "),t("blockquote",[t("p",[_._v("修复 bug 有可能引入新的 bug，每次修复 bug 后都要运行之前的所有测试用例。")])])]),_._v(" "),t("li",[t("p",[_._v("三心二意：细心、信心、耐心、沟通意识、缺陷预防意识；")])]),_._v(" "),t("li")]),_._v(" "),t("h2",{attrs:{id:"_1-14-软件测试规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-软件测试规范"}},[_._v("#")]),_._v(" 1.14 软件测试规范")]),_._v(" "),t("p",[_._v("测试系统主要由下面 6 个相互关联、相互作用的过程组成：")]),_._v(" "),t("ul",[t("li",[_._v("测试规划")]),_._v(" "),t("li",[_._v("测试设计")]),_._v(" "),t("li",[_._v("测试实施")]),_._v(" "),t("li",[_._v("测试管理")]),_._v(" "),t("li",[_._v("资源管理")]),_._v(" "),t("li",[_._v("配置管理")])]),_._v(" "),t("p",[_._v("软件测试过程中一般会从以下几个方面入手来规范过程，并在每个子过程明确角色、职责、活动描述以及所需材料：")]),_._v(" "),t("ol",[t("li",[_._v("角色的确定")]),_._v(" "),t("li",[_._v("进入的准则")]),_._v(" "),t("li",[_._v("输入项")]),_._v(" "),t("li",[_._v("活动过程")]),_._v(" "),t("li",[_._v("输出项")]),_._v(" "),t("li",[_._v("验证与确认")]),_._v(" "),t("li",[_._v("退出的准则")])]),_._v(" "),t("Vssue")],1)}),[],!1,null,null,null);v.default=s.exports}}]);