(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{534:function(s,t,n){"use strict";n.r(t);var a=n(47),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"二、redis-数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、redis-数据类型"}},[s._v("#")]),s._v(" 二、Redis 数据类型")]),s._v(" "),n("h2",{attrs:{id:"_1-redis-基本数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis-基本数据类型"}},[s._v("#")]),s._v(" 1. Redis 基本数据类型")]),s._v(" "),n("p",[s._v("基本数据结构包含：字符串（strings）、 散列（hashes）、 列表（lists）、 集合（sets）、 有序集合（sorted sets）五种。")]),s._v(" "),n("h3",{attrs:{id:"字符串-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符串-string"}},[s._v("#")]),s._v(" 字符串（string）")]),s._v(" "),n("p",[n("strong",[s._v("1）基本说明")])]),s._v(" "),n("p",[s._v("字符串是 Redis 最简单的储存类型，它存储的值可以是"),n("code",[s._v("字符串")]),s._v("、"),n("code",[s._v("整数")]),s._v("或者"),n("code",[s._v("浮点数")]),s._v("，对整个字符串或者字符串的其中一部分执行操作；对整数或者浮点数执行自增（increment）或者自减（decrement）操作。")]),s._v(" "),n("p",[s._v("Redis 的字符串是一个由字节组成的序列，跟 Java 里面的 "),n("strong",[s._v("ArrayList")]),s._v(" 有点类似，"),n("strong",[s._v("采用预分配冗余空间的方式来减少内存的频繁分配")]),s._v("，如图中所示，内部为当前字符串实际分配的空间 "),n("code",[s._v("capacity")]),s._v(" 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是 "),n("strong",[s._v("加倍")]),s._v(" 现有的空间，如果超过 1M，扩容时一次 "),n("strong",[s._v("只会多扩 1M")]),s._v(" 的空间。"),n("strong",[s._v("需要注意的是字符串最大长度为 512M")]),s._v("。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008eGmZEly1gphaysn7lbj30fw04pt8m.jpg",alt:"img"}})]),s._v(" "),n("p",[n("strong",[s._v("2）应用场景")])]),s._v(" "),n("p",[s._v("字符串类型在工作中使用广泛，主要用于"),n("strong",[s._v("缓存数据，提高查询性能")]),s._v("。比如存储登录用户信息、电商中存储商品信息、可以做计数器（想知道什么时候封锁一个IP地址（访问超过几次））等等。")]),s._v(" "),n("p",[n("strong",[s._v("3）操作指令")])]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加一条String类型数据")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" key value\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取一条String类型数据")]),s._v("\nget key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加多条String类型数据")]),s._v("\nmset key1 value1 key2 value2\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取多条String类型数据")]),s._v("\nmget key1 key2\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自增（+1）")]),s._v("\nincr key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按照步长（step）自增")]),s._v("\nincrby key step\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自减（-1）")]),s._v("\ndecr key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按照步长（step）递减")]),s._v("\ndecrby key step\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除")]),s._v("\ndel key\n")])])]),n("p",[n("strong",[s._v("4）实操")])]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 插入字符串  ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("set username zhangsan  \n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"OK"')]),s._v("  \n​  \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取字符串  ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("get username  \n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zhangsan"')]),s._v("  \n​  \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 插入多个字符串  ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("mset age "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" address bj  \n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"OK"')]),s._v("  \n​  \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取多个字符串  ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("mget username age  \n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zhangsan"')]),s._v("  \n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"18"')]),s._v("  \n​  \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自增  ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("incr num  \n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("  \n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("incr num  \n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v("  \n​  \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自减  ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("decr num  \n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("  \n​  \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定步长自增  ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("incrby num "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  \n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v("  \n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("incrby num "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  \n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"5"')]),s._v("  \n​  \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定步长自减  ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("decrby num "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  \n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v("  \n​  \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除  ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("del num  \n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("\n")])])]),n("h3",{attrs:{id:"散列-hash"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#散列-hash"}},[s._v("#")]),s._v(" 散列（hash）")]),s._v(" "),n("p",[n("strong",[s._v("1）基本说明")])]),s._v(" "),n("p",[s._v("散列相当于 Java 中的 HashMap，内部是无序字典。实现原理跟 "),n("code",[s._v("HashMap")]),s._v(" 一致。一个哈希表有多个节点，每个节点保存一个键值对。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008eGmZEly1gphb2sv4nbj30g307pa9z.jpg",alt:"img"}})]),s._v(" "),n("p",[s._v("与 Java 中的 HashMap 不同的是，rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，"),n("strong",[s._v("所以采用了渐进式 rehash 策略")]),s._v("。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008eGmZEly1gphb2gphyhj30ug08d0t1.jpg",alt:"img"}})]),s._v(" "),n("p",[n("strong",[s._v("渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的 hash 结构取而代之。")])]),s._v(" "),n("p",[n("strong",[s._v("当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。")])]),s._v(" "),n("p",[n("strong",[s._v("2）应用场景")])]),s._v(" "),n("p",[s._v("Hash 也可以同于对象存储，比如存储用户信息，与字符串不一样的是，字符串是需要将对象进行序列化（比如 JSON 序列化）之后才能保存，而 Hash 则可以将用户对象的每个字段单独存储，这样就能节省序列化和反序列的时间。如下：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008eGmZEly1gphb4gst7jg30ci04gtb5.gif",alt:"img"}})]),s._v(" "),n("p",[s._v("此外还可以保存用户的购买记录，比如 key 为用户 id，field 为商品 id，value 为商品数量。同样还可以用于购物车数据的存储，比如 key 为用户 id，field 为商品 id，value 为购买数量等等。")]),s._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://tva1.sinaimg.cn/large/008eGmZEgy1gphb50l4c5j30u00xvjys.jpg",alt:"img"}}),s._v(" "),n("p",[n("strong",[s._v("3）操作指令")])]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置属性")]),s._v("\nhset keyname field1 value1 field2 value2\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取某个属性值")]),s._v("\nhget keyname field\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取所有属性值")]),s._v("\nhgetall keyname\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除某个属性")]),s._v("\nhdel keyname field\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取属性个数")]),s._v("\nhlen keyname\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按照步长自增/自减某个属性（该属性必须是数字）")]),s._v("\nhincrby keyname field step\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除整个 hash")]),s._v("\ndel keyname\n")])])]),n("p",[n("strong",[s._v("4）实操")])]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 插入 hash 数据")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("hset userInfo username zhangsan age "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" address bj\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取 hash 单条 field 数据")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("hget userInfo username\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zhangsan"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("hget userInfo age\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"18"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取 hash 多个 field 数据")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("hmget userInfo username age\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zhangsan"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"18"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取 hash 所有 field 数据")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("hgetall userInfo\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"username"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zhangsan"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"age"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"18"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"address"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bj"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取 hash 的 field 个数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("hlen userInfo\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自增 hash 的某个 field")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("hincrby userInfo age "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"20"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("hincrby userInfo age "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"22"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自减 hash 的某个 field（通过自增负步长来实现）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("hincrby userInfo age -2\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"20"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除 hash 的某个 field")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("hdel userInfo age\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除 hash 所有数据")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("del userInfo\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("\n")])])]),n("h3",{attrs:{id:"列表-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#列表-list"}},[s._v("#")]),s._v(" 列表（list）")]),s._v(" "),n("p",[n("strong",[s._v("1）基本说明")])]),s._v(" "),n("p",[s._v("Redis 中的 lists 相当于 Java 中的 "),n("code",[s._v("LinkedList")]),s._v("，实现原理是一个双向链表（其底层是一个快速列表），即可以支持反向查找和遍历，更方便操作。插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)。")]),s._v(" "),n("p",[n("strong",[s._v("2）应用场景")])]),s._v(" "),n("p",[s._v("lists 的应用场景非常多，可以利用它轻松实现热销榜。")]),s._v(" "),n("p",[s._v("可以实现工作队列（利用 lists 的 push 操作，将任务存在 lists 中，然后工作线程再用 pop 操作将任务取出进行执行 ）。")]),s._v(" "),n("p",[s._v("可以实现最新列表，比如最新评论等。")]),s._v(" "),n("p",[n("strong",[s._v("3）操作指令")])]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 左进")]),s._v("\nlpush key value1 value2 value3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 左出")]),s._v("\nlpop key\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 右进")]),s._v("\nrpush key value1 value2 value3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 右出")]),s._v("\nrpop key\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从左往右读取 start和end是下标")]),s._v("\nlrange key start end\n")])])]),n("p",[n("strong",[s._v("4）实操")])]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从 list 左边依次插入")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("lpush student zhangsan lisi wangwu\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从 list 右边插入")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("rpush student tianqi\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从 list 左边弹出一个")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("lpop liangshan\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wangwu"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从 list 右边弹出一个")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("rpop liangshan\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tianqi"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取 list 下标 0 ~ 1 的数据(左闭右闭)")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("lrange liangshan "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lisi"')]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zhangsan"')]),s._v("\n")])])]),n("p",[n("strong",[s._v("5）注意：blpop 阻塞版获取")])]),s._v(" "),n("p",[s._v("为什么要阻塞版本的 pop 呢，主要"),n("strong",[s._v("是为了避免轮询。")])]),s._v(" "),n("p",[s._v("举个简单的例子如果我们用 list 来实现一个工作队列。执行任务的 thread 可以调用阻塞版本的 pop 去获取任务这样就可以避免轮询去检查是否有任务存在。当任务来时候工作线程可以立即返回，也可以避免轮询带来的延迟。")]),s._v(" "),n("h3",{attrs:{id:"集合-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集合-set"}},[s._v("#")]),s._v(" 集合（set）")]),s._v(" "),n("p",[n("strong",[s._v("1）基本说明")])]),s._v(" "),n("p",[s._v("集合类似 Java 中的 "),n("code",[s._v("HashSet")]),s._v("，内部实现是一个 value 永远为 null 的 HashMap，实际就是通过计算 hash 的方式来快速排重的，这\n也是 set 能提供判断一个成员是否在集合内的原因。")]),s._v(" "),n("p",[n("strong",[s._v("2）应用场景")])]),s._v(" "),n("p",[s._v("Redis 的 sets 类型是使用哈希表构造的，因此复杂度是 0(1)。它支持集合内的增删改查，并且支持多个集合间的交集、并集、\n差集操作。可以利用这些集合操作，解决程序开发过程当中很多数据集合间的问题。比如计算网站独立 ip，用户画像中的用\n户标签，共同好友等功能。")]),s._v(" "),n("p",[n("strong",[s._v("3）操作指令")])]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加内容")]),s._v("\nsadd key value1 value2\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询 key 里所有的值")]),s._v("\nsmembers key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 移除 key 里面的某个 value")]),s._v("\nsrem key value\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 随机移除某个 value")]),s._v("\nspop key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回两个 set 的并集")]),s._v("\nsunion key1 key2\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#返回 key1 剔除交集的那部分(差集)")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sdiff")]),s._v(" key1 key2\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#跟 siffer 相反，返回交集")]),s._v("\nsinter key1 key2\n")])])]),n("h3",{attrs:{id:"有序集合-sorted-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有序集合-sorted-set"}},[s._v("#")]),s._v(" 有序集合（sorted set）")]),s._v(" "),n("p",[n("strong",[s._v("1）基本说明")])]),s._v(" "),n("p",[s._v("sorted sets 是 Redis 类似于 "),n("code",[s._v("SortedSet")]),s._v(" 和 "),n("code",[s._v("HashMap")]),s._v(" 的结合体，一方面它是一个 set，保证了内部 value 的"),n("strong",[s._v("唯一性")]),s._v("，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的"),n("strong",[s._v("排序权重")]),s._v("。")]),s._v(" "),n("p",[s._v("内部使用 HashMap 和跳跃表（SkipList）来保证数据的存储和有序，HashMap 里放的是成员到 score 的映射，而跳跃表里存放的是所有的成员，排序依据是 HashMap 里存的 score，使用 "),n("strong",[s._v("跳跃表")]),s._v(" 的结构可以获得比较高的查找效率，并且在实现上比较简单。")]),s._v(" "),n("p",[s._v("sorted sets 中最后一个 value 被移除后，数据结构自动删除，内存被回收。")]),s._v(" "),n("p",[s._v("跳表：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008eGmZEgy1gphbh2tslvj31ku0qidvt.jpg",alt:"image-20210412221232375"}})]),s._v(" "),n("p",[n("strong",[s._v("2）应用场景")])]),s._v(" "),n("p",[s._v("主要应用于根据某个权重进行排序的队列的场景，比如游戏积分排行榜，设置优先级的任务列表，学生成绩表等。")]),s._v(" "),n("p",[n("strong",[s._v("3）操作指令")])]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加元素")]),s._v("\nzadd key score value "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("score value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取集合的值并按照score从小到大排列， 最小的是最上面")]),s._v("\nzrange key start end \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列, 最小的是最上面")]),s._v("\nzrangeByScore key score_min score_max \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除")]),s._v("\nzrem key value \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取key的集合有多少元素")]),s._v("\nzcard key\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计分数从小到大有多少元素 （闭区间）")]),s._v("\nzcount key score_min score_max \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取value所在位置（从小到大排序，最小的是0）")]),s._v("\nzrank key value \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取value所在的位置（从大到小排列， 最大的是0）")]),s._v("\nzrevrank key value\n")])])]),n("p",[n("strong",[s._v("4）实操")])]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 插入多条数据和分数并去重及排序")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("zadd rank "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("66")]),s._v(" zhangsan "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("88")]),s._v(" lisi "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("77")]),s._v(" wangwu "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v(" zhaoliu\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 插入多条数据及分数并去重及排序")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("zadd rank "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("66")]),s._v(" zhangsan "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("88")]),s._v(" lisi "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("77")]),s._v(" wangwu "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v(" zhaoliu\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取下标 0 ~ 3 的数据(左闭右闭)")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("zrange rank "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zhangsan"')]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wangwu"')]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lisi"')]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zhaoliu"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取分数在 77 ~ 99 之间的数据(左闭右闭)")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("zrangeByScore rank "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("77")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wangwu"')]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lisi"')]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zhaoliu"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除一条数据")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("zrem rank zhaoliu\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询元素的个数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("zcard rank\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计分数在 77 ~ 88 之间的数据(左闭右闭)")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("zcount rank "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("77")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("88")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取指定元素的下标")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("zrank rank zhangsan\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取指定元素的下标并反转")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("zrevrank rank zhangsan\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v("\n")])])]),n("h2",{attrs:{id:"_2-redis-高级数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis-高级数据类型"}},[s._v("#")]),s._v(" 2. Redis 高级数据类型")]),s._v(" "),n("h3",{attrs:{id:"位图-bitmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#位图-bitmap"}},[s._v("#")]),s._v(" 位图（bitmap）")]),s._v(" "),n("p",[n("strong",[s._v("1）基本说明")])]),s._v(" "),n("p",[s._v("bitmap 就是通过一个 bit 位来表示某个元素对应的值或者状态, 其中的 key 就是对应元素本身，实际上底层也是通过对字符串的操作来实现。bitmap 支持的最大位数是 2"),n("sup",[s._v("32")]),s._v(" 位，使用 512M 内存就可以存储多达 42.9 亿的字节信息。")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("SETBIT key offset value （offset位偏移量，从0开始）\n")])])]),n("p",[s._v("它是由一组 bit 位组成的，每个 bit 位对应 0 和 1 两个状态，虽然内部还是采用了 String 类型存储，但 Redis 提供了一些指令用于直接操作位图，因此我们可以把它看成一个 bit 数组，数组的下表就是偏移量。")]),s._v(" "),n("p",[n("strong",[s._v("2）使用场景")])]),s._v(" "),n("p",[s._v("它的优点是内存开销小、效率高且操作简单，很适合用于「签到」这类只有两种取值的场景。比如按月存储，一个月最多 31 天，那么我们一个用于再某一个月的签到缓存二进制就是：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("00000 00000 00000 00000 00000 00000 0\n")])])]),n("p",[s._v("当某天签到将 0 改成 1 即可。")]),s._v(" "),n("p",[n("strong",[s._v("3）操作指令")])]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置值，offset 从 0 开始")]),s._v("\nSETBIT key offset value\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取值")]),s._v("\nGETBIT key offset\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计指定字节区间 bit 为 1 的数量")]),s._v("\nBITCOUNT key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("start end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 操作多字节位域")]),s._v("\nBITFIELD key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("GET "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" offset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SET "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" offset value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("INCRBY "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" offset increment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OVERFLOW WRAP/SAT/FAIL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  查询指定字节区间第一个被设置成 1 的 bit 位的位置")]),s._v("\nBITPOS key bit "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("BITFIELD")]),s._v(" "),n("p",[n("code",[s._v("BITFIELD")]),s._v(" 命令可以将一个 Redis 字符串看作是一个由二进制位组成的数组，并对这个数组中储存的长度不同的整数进行访问（被储存的整数无需进行对齐）。换句话说，通过这个命令，用户可以执行诸如“对偏移量 1234 上的 5 位长有符号整数进行设置”、“获取偏移量 4567 上的 31 位长无符号整数”等操作。此外，"),n("code",[s._v("BITFIELD")]),s._v(" 命令还可以对指定的整数执行加法操作和减法操作，并且这些操作可以通过设置妥善地处理计算时出现的溢出情况。")]),s._v(" "),n("p",[n("code",[s._v("BITFIELD")]),s._v(" 命令可以在一次调用中同时对多个位范围进行操作：它接受一系列待执行的操作作为参数，并返回一个数组作为回复，数组中的每个元素就是对应操作的执行结果。")]),s._v(" "),n("p",[s._v("比如以下命令就展示了如何对位于偏移量 100 的 8 位长有符号整数执行加法操作，并获取位于偏移量 0 上的 4 位长无符号整数：")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" BITFIELD mykey INCRBY i8 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" GET u4 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),n("p",[s._v("注意：")]),s._v(" "),n("ul",[n("li",[s._v("使用 "),n("code",[s._v("GET")]),s._v(" 子命令对超出字符串当前范围的二进制位进行访问（包括键不存在的情况），超出部分的二进制位的值将被当做是 0 。")]),s._v(" "),n("li",[s._v("使用 "),n("code",[s._v("SET")]),s._v(" 子命令或者 "),n("code",[s._v("INCRBY")]),s._v(" 子命令对超出字符串当前范围的二进制位进行访问将导致字符串被扩大，被扩大的部分会使用值为 0 的二进制位进行填充。在对字符串进行扩展时，命令会根据字符串目前已有的最远端二进制位，计算出执行操作所需的最小长度。")])]),s._v(" "),n("p",[s._v("以下是 "),n("code",[s._v("BITFIELD")]),s._v(" 命令支持的子命令：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("GET <type> <offset>")]),s._v(" —— 返回指定的二进制位范围。")]),s._v(" "),n("li",[n("code",[s._v("SET <type> <offset> <value>")]),s._v(" —— 对指定的二进制位范围进行设置，并返回它的旧值。")]),s._v(" "),n("li",[n("code",[s._v("INCRBY <type> <offset> <increment>")]),s._v(" —— 对指定的二进制位范围执行加法操作，并返回它的旧值。用户可以通过向 "),n("code",[s._v("increment")]),s._v(" 参数传入负值来实现相应的减法操作。")])]),s._v(" "),n("p",[s._v("除了以上三个子命令之外，还有一个子命令，它可以改变之后执行的 "),n("code",[s._v("INCRBY")]),s._v(" 子命令在发生溢出情况时的行为：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("OVERFLOW [WRAP|SAT|FAIL]")])])]),s._v(" "),n("p",[s._v("当被设置的二进制位范围值为整数时，用户可以在类型参数的前面添加 "),n("code",[s._v("i")]),s._v(" 来表示有符号整数，或者使用 "),n("code",[s._v("u")]),s._v(" 来表示无符号整数。比如说，我们可以使用 "),n("code",[s._v("u8")]),s._v(" 来表示 8 位长的无符号整数，也可以使用 "),n("code",[s._v("i16")]),s._v(" 来表示 16 位长的有符号整数。")]),s._v(" "),n("p",[n("code",[s._v("BITFIELD")]),s._v(" 命令最大支持 64 位长的有符号整数以及 63 位长的无符号整数，其中无符号整数的 63 位长度限制是由于 Redis 协议目前还无法返回 64 位长的无符号整数而导致的。")]),s._v(" "),n("p",[n("strong",[s._v("二进制位和位置偏移量")])]),s._v(" "),n("p",[s._v("在二进制位范围命令中，用户有两种方法来设置偏移量：")]),s._v(" "),n("ul",[n("li",[s._v("如果用户给定的是一个没有任何前缀的数字，那么这个数字指示的就是字符串以零为开始（zero-base）的偏移量。")]),s._v(" "),n("li",[s._v("另一方面，如果用户给定的是一个带有 "),n("code",[s._v("#")]),s._v(" 前缀的偏移量，那么命令将使用这个偏移量与被设置的数字类型的位长度相乘，从而计算出真正的偏移量。")])]),s._v(" "),n("p",[s._v("比如说，对于以下这个命令来说：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("BITFIELD mystring SET i8 #0 100 i8 #1 200\n")])])]),n("p",[s._v("命令会把 "),n("code",[s._v("mystring")]),s._v(" 键里面，第一个 "),n("code",[s._v("i8")]),s._v(" 长度的二进制位的值设置为 "),n("code",[s._v("100")]),s._v(" ，并把第二个 "),n("code",[s._v("i8")]),s._v(" 长度的二进制位的值设置为 "),n("code",[s._v("200")]),s._v(" 。当我们把一个字符串键当成数组来使用，并且数组中储存的都是同等长度的整数时，使用 "),n("code",[s._v("#")]),s._v(" 前缀可以让我们免去手动计算被设置二进制位所在位置的麻烦。")]),s._v(" "),n("p",[n("strong",[s._v("溢出控制")])]),s._v(" "),n("p",[s._v("用户可以通过 "),n("code",[s._v("OVERFLOW")]),s._v(" 命令以及以下展示的三个参数，指定 "),n("code",[s._v("BITFIELD")]),s._v(" 命令在执行自增或者自减操作时，碰上向上溢出（overflow）或者向下溢出（underflow）情况时的行为：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("WRAP")]),s._v(" ：使用回绕（wrap around）方法处理有符号整数和无符号整数的溢出情况。对于无符号整数来说，回绕就像使用数值本身与能够被储存的最大无符号整数执行取模计算，这也是 C 语言的标准行为。对于有符号整数来说，上溢将导致数字重新从最小的负数开始计算，而下溢将导致数字重新从最大的正数开始计算。比如说，如果我们对一个值为 "),n("code",[s._v("127")]),s._v(" 的 "),n("code",[s._v("i8")]),s._v(" 整数执行加一操作，那么将得到结果 "),n("code",[s._v("-128")]),s._v(" 。")]),s._v(" "),n("li",[n("code",[s._v("SAT")]),s._v(" ：使用饱和计算（saturation arithmetic）方法处理溢出，也即是说，下溢计算的结果为最小的整数值，而上溢计算的结果为最大的整数值。举个例子，如果我们对一个值为 "),n("code",[s._v("120")]),s._v(" 的 "),n("code",[s._v("i8")]),s._v(" 整数执行加 "),n("code",[s._v("10")]),s._v(" 计算，那么命令的结果将为 "),n("code",[s._v("i8")]),s._v(" 类型所能储存的最大整数值 "),n("code",[s._v("127")]),s._v(" 。与此相反，如果一个针对 "),n("code",[s._v("i8")]),s._v(" 值的计算造成了下溢，那么这个 "),n("code",[s._v("i8")]),s._v(" 值将被设置为 "),n("code",[s._v("-127")]),s._v(" 。")]),s._v(" "),n("li",[n("code",[s._v("FAIL")]),s._v(" ：在这一模式下，命令将拒绝执行那些会导致上溢或者下溢情况出现的计算，并向用户返回空值表示计算未被执行。")])]),s._v(" "),n("p",[s._v("需要注意的是，"),n("code",[s._v("OVERFLOW")]),s._v(" 子命令只会对紧随着它之后被执行的 "),n("code",[s._v("INCRBY")]),s._v(" 命令产生效果，这一效果将一直持续到与它一同被执行的下一个 "),n("code",[s._v("OVERFLOW")]),s._v(" 命令为止。在默认情况下，"),n("code",[s._v("INCRBY")]),s._v(" 命令使用 "),n("code",[s._v("WRAP")]),s._v(" 方式来处理溢出计算。")]),s._v(" "),n("p",[s._v("以下是一个使用 "),n("code",[s._v("OVERFLOW")]),s._v(" 子命令来控制溢出行为的例子：")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" BITFIELD mykey incrby u2 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" OVERFLOW SAT incrby u2 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1021")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n \n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" BITFIELD mykey incrby u2 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" OVERFLOW SAT incrby u2 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1021")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n \n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" BITFIELD mykey incrby u2 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" OVERFLOW SAT incrby u2 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1021")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n \n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" BITFIELD mykey incrby u2 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" OVERFLOW SAT incrby u2 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1021")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("--使用默认的 WRAP 方式处理溢出\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("--使用 SAT 方式处理溢出\n")])])]),n("p",[s._v("而以下则是一个因为 "),n("code",[s._v("OVERFLOW FAIL")]),s._v(" 行为而导致子命令返回空值的例子：")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" BITFIELD mykey OVERFLOW FAIL incrby u2 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1021")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nil"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),n("p",[n("strong",[s._v("作用")])]),s._v(" "),n("p",[n("code",[s._v("BITFIELD")]),s._v(" 命令的作用在于它能够将很多小的整数储存到一个长度较大的位图中，又或者将一个非常庞大的键分割为多个较小的键来进行储存，从而非常高效地使用内存，使得 Redis 能够得到更多不同的应用 ——特别是在实时分析领域："),n("code",[s._v("BITFIELD")]),s._v(" 能够以指定的方式对计算溢出进行控制的能力，使得它可以被应用于这一领域。")]),s._v(" "),n("p",[n("strong",[s._v("性能注意事项")])]),s._v(" "),n("p",[n("code",[s._v("BITFIELD")]),s._v(" 在一般情况下都是一个快速的命令，需要注意的是，访问一个长度较短的字符串的远端二进制位将引发一次内存分配操作，这一操作花费的时间可能会比命令访问已有的字符串花费的时间要长。")]),s._v(" "),n("p",[n("strong",[s._v("二进制位的排列")])]),s._v(" "),n("p",[n("code",[s._v("BITFIELD")]),s._v(" 把位图第一个字节偏移量 0 上的二进制位看作是 most significant 位，以此类推。举个例子，如果我们对一个已经预先被全部设置为 0 的位图进行设置，将它在偏移量 7 的值设置为 5 位无符号整数值 23 （二进制位为 "),n("code",[s._v("10111")]),s._v(" ），那么命令将生产出以下这个位图表示：")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("+--------+--------+\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("00000001"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("01110000"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+--------+--------+\n")])])]),n("p",[s._v("当偏移量和整数长度与字节边界进行对齐时，"),n("code",[s._v("BITFIELD")]),s._v(" 表示二进制位的方式跟大端表示法（big endian）一致，但是在没有对齐的情况下，理解这些二进制位是如何进行排列也是非常重要的。")]),s._v(" "),n("p",[n("strong",[s._v("返回值")])]),s._v(" "),n("p",[n("code",[s._v("BITFIELD")]),s._v(" 命令的返回值是一个数组，数组中的每个元素对应一个被执行的子命令。需要注意的是，"),n("code",[s._v("OVERFLOW")]),s._v(" 子命令本身并不产生任何回复。")])]),s._v(" "),n("p",[n("strong",[s._v("4）实操")])]),s._v(" "),n("blockquote",[n("p",[s._v("模仿一个签到功能。")])]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一个用于在 2021 年 8 月第一个签到了")]),s._v("\nSETBIT user:sign:5:202108 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 检查某个用户在 2021 年 8 月 3 号是否签到了")]),s._v("\nGETBIT user:sign:5:202108 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计某个用户在 2021 年 8 月签到了多少次")]),s._v("\nBITCOUNT user:sign:5:202108\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取某个用户在 2021 年 8 月首次签到")]),s._v("\nBITPOS user:sign:5:202108 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取某个用户在 2021 年 8 月首次漏签")]),s._v("\nBITPOS user:sign:5:202108 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取偏移量 0 的 3 位无符号整数")]),s._v("\nBITFIELD user:sign:5:202108 get u3 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),n("h3",{attrs:{id:"基数统计-hyperloglog"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基数统计-hyperloglog"}},[s._v("#")]),s._v(" 基数统计（hyperloglog）")]),s._v(" "),n("p",[n("strong",[s._v("1）基本说明")])]),s._v(" "),n("p",[s._v("Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。")]),s._v(" "),n("p",[s._v("什么是基数？比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}，基数（不重复元素个数）为5。 基数估计就是在误差可接受的范围内，快速计算基数。")]),s._v(" "),n("p",[s._v("在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2"),n("sup",[s._v("64")]),s._v(" 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。")]),s._v(" "),n("p",[s._v("但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。")]),s._v(" "),n("p",[s._v("HyperLogLog 算法是一种非常巧妙的近似统计海量去重元素数量的算法。它内部维护了 16384 个桶（bucket）来记录各自桶的元素数量。当一个元素到来时，它会散列到其中一个桶，以一定的概率影响这个桶的计数值。因为是概率算法，所以单个桶的计数值并不准确，但是将所有的桶计数值进行调合均值累加起来，结果就会非常接近真实的计数值。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNly1gtcnitfai2j60u00ci0su02.jpg",alt:"640?wx_fmt=png"}})]),s._v(" "),n("p",[n("strong",[s._v("2）使用场景")])]),s._v(" "),n("p",[s._v("如果你负责开发维护一个大型的网站，有一天老板找产品经理要网站每个网页每天的 UV 数据，然后让你来开发这个统计模块，你会如何实现？")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNly1gtcndpbdcwg60b403k0z902.gif",alt:"在这里插入图片描述"}})]),s._v(" "),n("p",[s._v("如果统计 PV 那非常好办，给每个网页一个独立的 Redis 计数器就可以了，这个计数器的 key 后缀加上当天的日期。这样来一个请求，incrby 一次，最终就可以统计出所有的 PV 数据。")]),s._v(" "),n("p",[s._v("但是 UV 不一样，它要去重，同一个用户一天之内的多次访问请求只能计数一次。这就要求每一个网页请求都需要带上用户的 ID，无论是登陆用户还是未登陆用户都需要一个唯一 ID 来标识。")]),s._v(" "),n("p",[s._v("你也许已经想到了一个简单的方案，那就是为每一个页面一个独立的 set 集合来存储所有当天访问过此页面的用户 ID。当一个请求过来时，我们使用 sadd 将用户 ID 塞进去就可以了。通过 scard 可以取出这个集合的大小，这个数字就是这个页面的 UV 数据。没错，这是一个非常简单的方案。")]),s._v(" "),n("p",[s._v("但是，如果你的页面访问量非常大，比如一个爆款页面几千万的 UV，你需要一个很大的 set 集合来统计，这就非常浪费空间。而 Redis 的 HyperLogLog，就是用来解决这种统计问题的。HyperLogLog 提供不精确的去重计数方案，虽然不精确但是也不是非常不精确，标准误差是 0.81%，这样的精确度已经可以满足上面的 UV 统计需求了。")]),s._v(" "),n("p",[n("strong",[s._v("3）操作指令")])]),s._v(" "),n("p",[s._v("Redis 的位数组是自动扩展，如果设置了某个偏移位置超出了现有的内容范围，就会自动将位数组进行零扩充。")]),s._v(" "),n("p",[s._v("HyperLogLog 提供了两个指令 pfadd 和 pfcount，根据字面意义很好理解，一个是增加计数，一个是获取计数。pfadd 用法和 set 集合的 sadd 是一样的，来一个用户 ID，就将用户 ID 塞进去就是。pfcount 和 scard 用法是一样的，直接获取计数值。")]),s._v(" "),n("p",[s._v('但是不可以使用 HyperLogLog 指令来操纵普通的字符串，因为它需要检查对象头魔术字符串是否是 "HYLL"。')]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加指定元素到 HyperLogLog 中")]),s._v("\nPFADD key element "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("element"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回给定 HyperLogLog 的基数估算值")]),s._v("\nPFCOUNT key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将多个 HyperLogLog 合并为一个 HyperLogLog")]),s._v("\nPFMERGE destkey sourcekey "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sourcekey"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),n("p",[n("strong",[s._v("4）实操")])]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 插入元素")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" PFADD hedonKey redis\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" PFADD hedonKey hello\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" PFADD hedonKey hi\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询基数预估值")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" PFCOUNT hedonKey\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" PFADD hedonKey2 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" PFCOUNT hedonKey2\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 合并")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" PFMERGE hedonKey hedonKey2\nOK\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" PFCOUNT hedonKey\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n")])])]),n("h3",{attrs:{id:"地理位置-geo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#地理位置-geo"}},[s._v("#")]),s._v(" 地理位置（geo）")]),s._v(" "),n("p",[n("strong",[s._v("1）基本说明")])]),s._v(" "),n("p",[s._v("Redis GEO主要用于存储地理位置信息，并对存储的信息进行操作，该功能在 Redis 3.2 版本新增。")]),s._v(" "),n("p",[n("strong",[s._v("2）使用场景")])]),s._v(" "),n("p",[s._v("GEO 支持存储地理位置信息用来实现诸如附近位置、摇一摇这类依赖于地理位置信息的功能。")]),s._v(" "),n("p",[s._v("GEO 的数据类型为 SORTED SET。")]),s._v(" "),n("p",[n("strong",[s._v("3）操作指令")])]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加地理位置的坐标")]),s._v("\nGEOADD key longitude latitude member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("longitude latitude member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取地理位置的坐标")]),s._v("\nGEOPOS key member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 计算两个位置之间的距离")]),s._v("\nGEODIST key member1 member2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("m"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("km"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("ft"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("mi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n- m ：米，默认单位。\n- km ：千米。\n- mi ：英里。\n- ft ：英尺。\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据用户给定的经纬度坐标来获取指定范围内的地理位置集合")]),s._v("\nGEORADIUS key longitude latitude radius m"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("km"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("ft"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("mi "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("WITHCOORD"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("WITHDIST"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("WITHHASH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("COUNT count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ASC"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("DESC"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("STORE key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("STOREDIST key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合")]),s._v("\nGEORADIUSBYMEMBER key member radius m"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("km"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("ft"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("mi "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("WITHCOORD"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("WITHDIST"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("WITHHASH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("COUNT count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ASC"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("DESC"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("STORE key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("STOREDIST key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n- WITHDIST: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回\n- WITHCOORD: 将位置元素的经度和维度也一并返回。\n- WITHHASH: 以 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),s._v(" 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。\n- COUNT 限定返回的记录数。\n- ASC: 查找结果根据距离从近到远排序。\n- DESC: 查找结果根据从远到近排序。\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回一个或多个位置对象的 geohash 值")]),s._v("\nGEOHASH key member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),n("p",[n("strong",[s._v("4）实操")])]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加地理位置的坐标")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" GEOADD hedonGeo "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("13.361389")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("38.115556")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"beijing"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("15.087269")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("37.502669")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"shanghai"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取地理位置的坐标")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" GEOPOS hedonGeo beijing\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"13.36138933897018433"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"38.11555639549629859"')]),s._v("\n   \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 计算距离")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" GEODIST hedonGeo beijing shanghai\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"166274.1516"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" GEODIST hedonGeo beijing shanghai km\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"166.2742"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据用户给定的经纬度坐标来获取指定范围内的地理位置集合")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" GEORADIUS hedonGeo "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("37")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" km WITHDIST\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"beijing"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"128.1052"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"shanghai"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"193.0633"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" GEORADIUS hedonGeo "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("37")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" km WITHCOORD\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"beijing"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"13.36138933897018433"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"38.11555639549629859"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"shanghai"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"15.08726745843887329"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"37.50266842333162032"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" GEORADIUS hedonGeo "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("37")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" km WITHDIST WITHCOORD\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"beijing"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"128.1052"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"13.36138933897018433"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"38.11555639549629859"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"shanghai"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"193.0633"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"15.08726745843887329"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"37.50266842333162032"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" GEORADIUSBYMEMBER hedonGeo beijing "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" km\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"beijing"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回位置对象的 geohash 值")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" GEOHASH hedonGeo beijing\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sqc8b49rny0"')]),s._v("\n")])])]),n("h3",{attrs:{id:"发布订阅-pub-sub"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅-pub-sub"}},[s._v("#")]),s._v(" 发布订阅（pub/sub）")]),s._v(" "),n("p",[n("strong",[s._v("1）基本说明")])]),s._v(" "),n("p",[s._v("Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。")]),s._v(" "),n("p",[s._v("Redis 客户端可以订阅任意数量的频道。")]),s._v(" "),n("p",[s._v("下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNly1gtco5smtayj608v05i0sw02.jpg",alt:"img"}})]),s._v(" "),n("p",[s._v("当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNly1gtco5saq9ij608r07xt9302.jpg",alt:"img"}})]),s._v(" "),n("p",[n("strong",[s._v("2）使用场景")])]),s._v(" "),n("p",[s._v("主要是作为消息通信功能，如构建实时消息系统，普通的即时聊天，群聊等功能。")]),s._v(" "),n("p",[n("strong",[s._v("3）操作指令")])]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 订阅一个或多个符合给定模式的频道")]),s._v("\nPSUBSCRIBE pattern "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pattern "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 订阅给定的一个或多个频道的信息")]),s._v("\nSUBSCRIBE channel "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("channel "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看订阅与发布系统状态")]),s._v("\nPUBSUB subcommand "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("argument "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("argument "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将信息发送到指定的频道")]),s._v("\nPUBLISH channel message\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 退订所有给定模式的频道")]),s._v("\nPUNSUBSCRIBE "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pattern "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pattern "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 退订给定的频道")]),s._v("\nUNSUBSCRIBE "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("channel "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("channel "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),n("p",[n("strong",[s._v("4）实操")])]),s._v(" "),n("p",[s._v("开启第一个 Redis Client，订阅频道名为 "),n("code",[s._v("hedonChannel")]),s._v(" 的频道：")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" SUBSCRIBE hedonChannel\nReading messages"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("press Ctrl-C to quit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"subscribe"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hedonChannel"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),n("p",[s._v("再开启第二个 Redis Client，然后在同一个频道 "),n("code",[s._v("hedonChannel")]),s._v(" 发布两次消息：")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" PUBLISH hedonChannel "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hedonn sends message one"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" PUBLISH hedonChannel "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hedonn sends message two"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),n("p",[s._v("可以看到第一个 Redis Client 就收到了信息：")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" SUBSCRIBE hedonChannel\nReading messages"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("press Ctrl-C to quit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"subscribe"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hedonChannel"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"message"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hedonChannel"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hedonn sends message one"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"message"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hedonChannel"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hedonn sends message two"')]),s._v("\n")])])]),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[s._v("提问：为什么不推荐 Redis 作为消息队列？")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("系统稳定性：在旧版的 Redis 中，如果一个客户端订阅了某个或者某些频道，但是它读取消息的速度不够快，那么不断的积压的消息就会使得 Redis 输出缓冲区的体积越来越大，这可能会导致 Redis 的速度变慢，甚至直接崩溃。也可能会导致 Redis 被操作系统强制杀死，甚至导致操作系统本身不可用。")])]),s._v(" "),n("li",[n("p",[s._v("数据可靠性：任何网络系统在执行操作时都可能会遇到断网的情况。而断线产生的连接错误通常会使得网络连接两端中的一端进行重新连接。如果客户端在执行订阅操作的过程中断线，那么客户端将会丢失在断线期间的消息，这在很多业务场景下是不可忍受的。")])])])]),s._v(" "),n("Vssue")],1)}),[],!1,null,null,null);t.default=e.exports}}]);