(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{437:function(t,a,s){"use strict";s.r(a);var e=s(47),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_1-为什么要使用-go-语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么要使用-go-语言"}},[t._v("#")]),t._v(" 1. 为什么要使用 Go 语言？")]),t._v(" "),s("ul",[s("li",[t._v("Go 语言直接编译为二进制，没有虚拟化损失")]),t._v(" "),s("li",[t._v("Go 语言自带运行环境，无需处理 GC 问题")]),t._v(" "),s("li",[t._v("一次编码可以适用多种平台")]),t._v(" "),s("li",[t._v("超强的并发支持能力与并发易用性")])]),t._v(" "),s("h1",{attrs:{id:"_2-何为-runtime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-何为-runtime"}},[t._v("#")]),t._v(" 2. 何为 Runtime？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Runtime 即 Go 程序的运行环境，可以理解为 Java 的 JVM、JavaScript 依赖的浏览器内核")])]),t._v(" "),s("li",[s("p",[t._v("Go 的 Runtime 是一份代码，它会随用户程序一起打包成二进制产物，一起运行")]),t._v(" "),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"03-what_is_go.assets/image-20220805131543665.png",alt:"image-20220805131543665"}})]),t._v(" "),s("li",[s("p",[t._v("Runtime 具有内存管理能力、GC、并发能力（协程调度）、屏蔽不同系统调用能力")])]),t._v(" "),s("li",[s("p",[t._v("以下关键字底层都是调用 Runtime 下的函数：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("关键字")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("函数")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("go")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("newproc")])]),t._v(" "),s("tr",[s("td",[t._v("new")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("newobject")])]),t._v(" "),s("tr",[s("td",[t._v("make")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("makeslice、makechain、makemap")])]),t._v(" "),s("tr",[s("td",[t._v("<-")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("chansend1、chanrecv1")])])])])])]),t._v(" "),s("h1",{attrs:{id:"_3-go-是面向对象吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-go-是面向对象吗"}},[t._v("#")]),t._v(" 3. Go 是面向对象吗？")]),t._v(" "),s("blockquote",[s("p",[t._v("官方回答：yes and no.")])]),t._v(" "),s("ul",[s("li",[t._v("Go 支持 OO 编程风格（struct）")]),t._v(" "),s("li",[t._v("Go 缺乏其他语言的继承结构（Go 只能说是组合）")]),t._v(" "),s("li",[t._v("struct 每个实例并不是“对象 object”，而且此类型的“值 value”")]),t._v(" "),s("li",[t._v("struct 也可以定义方法")]),t._v(" "),s("li",[t._v("Go 也有接口 interface，可以用来定义一组行为相似的 struct，但无须显示实现")])]),t._v(" "),s("h1",{attrs:{id:"_4-go-程序是如何编译的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-go-程序是如何编译的"}},[t._v("#")]),t._v(" 4. Go 程序是如何编译的？")]),t._v(" "),s("p",[t._v("实例程序：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("运行：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("go build -n "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#不实际编译，只输出编译过程")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. 创建工作目录")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WORK")]),t._v("/b001/\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WORK")]),t._v("/b001/importcfg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'EOF'"),s("span",{pre:!0,attrs:{class:"token bash punctuation"}},[t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# internal")])]),t._v("\n# 2. 引入相关依赖\npackagefile fmt=/usr/local/opt/go/libexec/pkg/darwin_amd64/fmt.a\npackagefile runtime=/usr/local/opt/go/libexec/pkg/darwin_amd64/runtime.a\nEOF")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3. 进入项目目录并编译成一堆 .a 文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /Users/hedonwang/GolandProjects/go-advance\n/usr/local/opt/go/libexec/pkg/tool/darwin_amd64/compile -o "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WORK")]),t._v("/b001/_pkg_.a -trimpath "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WORK")]),t._v('/b001=>"')]),t._v(" -p main -lang"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("go1.18 -complete -buildid qTV5GO9_7bKkS0N7SO2j/qTV5GO9_7bKkS0N7SO2j -goversion go1.18.5 -c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" -nolocalimports -importcfg "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WORK")]),t._v("/b001/importcfg -pack ./main.go\n/usr/local/opt/go/libexec/pkg/tool/darwin_amd64/buildid -w "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WORK")]),t._v("/b001/_pkg_.a "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# internal")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WORK")]),t._v("/b001/importcfg.link "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'EOF'"),s("span",{pre:!0,attrs:{class:"token bash punctuation"}},[t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# internal")])]),t._v('\n# 编译产物是一堆 .a 文件（机器码中间件）\npackagefile go-advance=$WORK/b001/_pkg_.a\n....\npackagefile path=/usr/local/opt/go/libexec/pkg/darwin_amd64/path.a\nmodinfo "0w\\xaf\\f\\x92t\\b\\x02A\\xe1\\xc1\\a\\xe6\\xd6\\x18\\xe6path\\tgo-advance\\nmod\\tgo-advance\\t(devel)\\t\\nbuild\\t-compiler=gc\\nbuild\\tCGO_ENABLED=1\\nbuild\\tCGO_CFLAGS=\\nbuild\\tCGO_CPPFLAGS=\\nbuild\\tCGO_CXXFLAGS=\\nbuild\\tCGO_LDFLAGS=\\nbuild\\tGOARCH=amd64\\nbuild\\tGOOS=darwin\\nbuild\\tGOAMD64=v1\\n\\xf92C1\\x86\\x18 r\\x00\\x82B\\x10A\\x16\\xd8\\xf2"\nEOF')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WORK")]),t._v("/b001/exe/\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4. 将所有 .a 文件链接成一个可执行文件 a.out，最后会对它进行重命名，默认为应用名（本例子中为 go-advance）")]),t._v("\n/usr/local/opt/go/libexec/pkg/tool/darwin_amd64/link -o "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WORK")]),t._v("/b001/exe/a.out -importcfg "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WORK")]),t._v("/b001/importcfg.link -buildmode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("exe -buildid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("JcVORsNHChlDnsHiGpRn/qTV5GO9_7bKkS0N7SO2j/qTV5GO9_7bKkS0N7SO2j/JcVORsNHChlDnsHiGpRn -extld"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("clang "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WORK")]),t._v("/b001/_pkg_.a\n/usr/local/opt/go/libexec/pkg/tool/darwin_amd64/buildid -w "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WORK")]),t._v("/b001/exe/a.out "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# internal")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$WORK")]),t._v("/b001/exe/a.out go-advance\n")])])]),s("p",[t._v("总结：")]),t._v(" "),s("div",{staticClass:"language-mermaid extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("graph LR;\n\t1[词法分析] --\x3e 2[句法分析] --\x3e 3[语义分析] --\x3e 4[SSA中间码生成] --\x3e 5[代码优化] --\x3e 6[机器码生成] --\x3e 7[链接成可执行文件]\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("如何查看生成的 SSA 码？")]),t._v(" "),s("p",[t._v("编译前：")]),t._v(" "),s("ul",[s("li",[t._v('windows：$env:GOSSAFUNC="指定函数"')]),t._v(" "),s("li",[t._v("unix: export GOSSAFUNC=指定函数")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("如何查看生成的 Plan9 汇编代码？")]),t._v(" "),s("ul",[s("li",[t._v("go build -gcflags -S main.go")])])]),t._v(" "),s("h1",{attrs:{id:"_5-go-程序是如何启动起来的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-go-程序是如何启动起来的"}},[t._v("#")]),t._v(" 5. Go 程序是如何启动起来的？")]),t._v(" "),s("p",[t._v("运行 runtime/rt0_xxx.s 汇编文件")]),t._v(" "),s("ol",[s("li",[t._v("读取命令行参数：复制参数变量 argc 和 argv 到栈上；")]),t._v(" "),s("li",[t._v("初始化 g0 执行栈：g0 是为了调度协程而产生的协程，是每个 Go 程序的第一个协程；")]),t._v(" "),s("li",[t._v("运行时检查：\n"),s("ul",[s("li",[t._v("类型长度")]),t._v(" "),s("li",[t._v("指针操作")]),t._v(" "),s("li",[t._v("结构体字段偏移量")]),t._v(" "),s("li",[t._v("atomic 原子操作")]),t._v(" "),s("li",[t._v("CAS 操作")]),t._v(" "),s("li",[t._v("栈大小是否是 2 的幂次")])])]),t._v(" "),s("li",[t._v("参数初始化 runtime.args：对命令行中的参数进行处理，参数数量复制给 argc（int32），参数值赋值给 argv（**byte）")]),t._v(" "),s("li",[t._v("初始化调度器 runtime.schedinit：\n"),s("ul",[s("li",[t._v("全局栈空间内存分配")]),t._v(" "),s("li",[t._v("堆内存空间的初始化")]),t._v(" "),s("li",[t._v("初始化当前系统线程")]),t._v(" "),s("li",[t._v("算法初始化（map、hash）")]),t._v(" "),s("li",[t._v("加载命令行参数到 os.Args")]),t._v(" "),s("li",[t._v("加载操作系统环境变量")]),t._v(" "),s("li",[t._v("gc 的参数初始化")]),t._v(" "),s("li",[t._v("设置 process 的数量")])])]),t._v(" "),s("li",[t._v("创建主协程：执行 runtime.main 并将其放入调度器等待调度；")]),t._v(" "),s("li",[t._v("初始化一个 M，用来调度主协程；")]),t._v(" "),s("li",[t._v("主协程执行主函数 runtime.main，它会执行：\n"),s("ul",[s("li",[t._v("runtime.init")]),t._v(" "),s("li",[t._v("启动 gc 垃圾回收器")]),t._v(" "),s("li",[t._v("用户包依赖的 init 方法")]),t._v(" "),s("li",[t._v("用户主函数 main.main")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"03-what_is_go.assets/v2-a980706772b44be35a4b6dcf87757127_r.png",alt:"preview"}})]),t._v(" "),s("h1",{attrs:{id:"_6-go-包管理方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-go-包管理方法"}},[t._v("#")]),t._v(" 6. Go 包管理方法")]),t._v(" "),s("p",[t._v("参考：Go Modules")]),t._v(" "),s("Vssue")],1)}),[],!1,null,null,null);a.default=n.exports}}]);