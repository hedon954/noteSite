(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{544:function(a,e,t){"use strict";t.r(e);var n=t(47),l=Object(n.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"查找表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找表"}},[a._v("#")]),a._v(" 查找表")]),a._v(" "),t("ul",[t("li",[a._v("查找有无\n"),t("ul",[t("li",[a._v("元素 a 是否存在？—— Set")])])]),a._v(" "),t("li",[a._v("查找对应关系（键值对应）\n"),t("ul",[t("li",[a._v("元素 a 出现了几次？—— Map")])])])]),a._v(" "),t("h2",{attrs:{id:"java-中的-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-中的-set"}},[a._v("#")]),a._v(" Java 中的 Set")]),a._v(" "),t("p",[a._v("Set：元素无序、不可重复的集合")]),a._v(" "),t("ul",[t("li",[a._v("HashSet：HashTable 实现，无序")]),a._v(" "),t("li",[a._v("TreeSet：红黑树实现")]),a._v(" "),t("li",[a._v("LinkedHashSet：HashTable 实现数据存储，双向链表记录顺序。")])]),a._v(" "),t("div",{staticClass:"language-markdown extra-class"},[t("pre",{pre:!0,attrs:{class:"language-markdown"}},[t("code",[t("span",{pre:!0,attrs:{class:"token title important"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("#")]),a._v(" 添加、删除、修改操作")]),a._v("\nadd(Object obj): 添加一个元素\naddAll(Collection coll): 添加整个集合\nvoid clear(): 清空集合\nboolean remove(Object obj): 删除一个元素\nboolean removeAll(Collection coll): 删除一个集合中存在的元素\n"),t("span",{pre:!0,attrs:{class:"token title important"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("#")]),a._v(" 元素查询的操作")]),a._v("\nboolean contains(Object obj): 判断是否存在元素 obj\nboolean containsAll(Collection c): 判断是否存在集合 c 中的所有元素\nboolean isEmpty(): 判断集合是否为空\nint size(): 获得集合中元素的个数\n")])])]),t("h2",{attrs:{id:"java-中的-map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-中的-map"}},[a._v("#")]),a._v(" Java 中的 Map")]),a._v(" "),t("p",[a._v("Map 接口：双列数据，保存具有映射关系"),t("code",[a._v("“key-value”")]),a._v("的集合。")]),a._v(" "),t("ul",[t("li",[a._v("HashMap：JDK7 数组+链表存储数据，JDK 8 数组+链表+红黑树存储数据，线程不安全，")]),a._v(" "),t("li",[a._v("ConcurrentHashMap：JDK7 是基于分段锁实现线程安全，JDK8 是 CAS + synchronized 实现线程安全。")]),a._v(" "),t("li",[a._v("HashTable：线程安全")]),a._v(" "),t("li",[a._v("TreeMap：基于红黑树实现。")]),a._v(" "),t("li",[a._v("LinkedHashMap：基于 HashTable 数据结构，使用链表保存插入顺序")])]),a._v(" "),t("div",{staticClass:"language-markdown extra-class"},[t("pre",{pre:!0,attrs:{class:"language-markdown"}},[t("code",[t("span",{pre:!0,attrs:{class:"token title important"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("#")]),a._v(" 添加、删除、修改操作")]),a._v("\nObject put(Object key,Object value)：将指定 key-value 添加到(或修改)当前 map 对象中\nvoid putAll(Map m)：将 m 中的所有 key-value 对存放到当前 map 中\nObject remove(Object key)：移除指定 key 的 key-value 对，并返回 value\nvoid clear()：清空当前 map 中的所有数据\n"),t("span",{pre:!0,attrs:{class:"token title important"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("#")]),a._v(" 元素查询的操作")]),a._v("\nObject get(Object key)：获取指定 key 对应的 value\nboolean containsKey(Object key)：是否包含指定的 key\nboolean containsValue(Object value)：否包含指定的 value\nint size()：返回 map 中 key-value 对的个数\nboolean isEmpty()：判断当前 map 是否为空\nboolean equals(Object obj)：判断当前 map 和参数对象 obj 是否相等\n"),t("span",{pre:!0,attrs:{class:"token title important"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("#")]),a._v(" 元视图操作的方法")]),a._v("\nSet keySet()：返回所有 key 构成的 Set 集合\nCollection values()：返回所有 value 构成的 Collection 集合\nSet entrySet()：返回所有 key-value 对构成的 Set 集合\n")])])]),t("Vssue")],1)}),[],!1,null,null,null);e.default=l.exports}}]);