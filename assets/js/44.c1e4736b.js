(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{455:function(e,a,t){"use strict";t.r(a);var v=t(47),s=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"raft-extended-翻译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raft-extended-翻译"}},[e._v("#")]),e._v(" Raft-Extended 翻译")]),e._v(" "),t("blockquote",[t("p",[e._v("原文：https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf")])]),e._v(" "),t("h2",{attrs:{id:"辨析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#辨析"}},[e._v("#")]),e._v(" 辨析")]),e._v(" "),t("p",[t("strong",[e._v("consensus")]),e._v(" vs "),t("strong",[e._v("consistency")])]),e._v(" "),t("p",[e._v("一致性（consistency）往往指分布式系统中多个副本对外呈现的数据的状态。如顺序一致性、线性一致性，描述了多个节点对数据状态的维护能力。")]),e._v(" "),t("p",[e._v("共识（consensus）则描述了分布式系统中多个节点之间，彼此对某个提案达成一致结果的过程。")]),e._v(" "),t("p",[e._v("因此，一致性描述的是"),t("strong",[e._v("结果")]),e._v("，共识则是一种"),t("strong",[e._v("手段")]),e._v("。")]),e._v(" "),t("p",[e._v("有的人会说一致性和共识实际上是一个问题的一体两面，某种程度上来说，共识方法确实可以看作是实现强一致性的一种方法。事实上在工业界有许多以共识算法作为核心组件的多副本状态机（Replicated State Machine）实现，本质上利用了共识算法保证了所有副本的操作日志具有完全相同的顺序，从而实现了副本的一致性。但是，即使是在这样的场景下，讨论一个共识算法的一致性也是不合适的，因"),t("strong",[e._v("为整个分布式系统最终的一致性并不单单取决于共识算法，共识算法只是解决了其中一个问题。")])]),e._v(" "),t("blockquote",[t("p",[e._v("参考：https://zhuanlan.zhihu.com/p/68743917")])]),e._v(" "),t("h2",{attrs:{id:"_0-摘要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-摘要"}},[e._v("#")]),e._v(" 0. 摘要")]),e._v(" "),t("p",[e._v("Raft 是用来管理复制日志（replicated log）的一致性协议。它跟 multi-Paxos 作用相同，效率也相当。但是它的组织结构跟 Paxos 不同，也是因为 Raft 更简单的架构使得它更容易被理解，并且更容易在实际工程中得以实现。")]),e._v(" "),t("p",[e._v("为了让 Raft 更容易被理解，Raft 将共识算法的关键性因素切分成几个部分，比如：")]),e._v(" "),t("ul",[t("li",[e._v("leader election（领导者选举）")]),e._v(" "),t("li",[e._v("log replication（日志复制）")]),e._v(" "),t("li",[e._v("safety（安全性）")])]),e._v(" "),t("p",[e._v("并且 Raft 实施了一种更强的共识性以便减少必须要考虑的状态（states）的数量。")]),e._v(" "),t("p",[e._v("用户研究表明，对于学生来说，Raft 相比于 Paxos 是更容易学习的。")]),e._v(" "),t("p",[e._v("Raft 还包括一个用于解决"),t("strong",[e._v("变更集群成员问题")]),e._v("的新机制，它适用重写多数来保证安全性。")]),e._v(" "),t("h2",{attrs:{id:"_1-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍"}},[e._v("#")]),e._v(" 1. 介绍")]),e._v(" "),t("p",[e._v("共识算法允许多台机器作为一个集群协同工作，并且在其中的某几台机器出故障时集群仍然能正常工作。正因为如此，共识算法在建立可靠的大规模软件系统方面发挥了重要作用。在过去十年中，Paxos [15,16] 主导了关于共识算法的讨论：大多数共识性的实现都是基于 Paxos 或受其影响，Paxos 已经成为教授学生关于共识知识的主要工具。")]),e._v(" "),t("p",[e._v("比较遗憾的是，尽管很多人一直在努力尝试使 Paxos 更易懂，Paxos 还是太难理解了。此外，Paxos 的架构需要复杂的改变来支持实际系统。这导致的结果就是系统开发者和学生在学生和使用 Paxos 过程中都很挣扎。")]),e._v(" "),t("p",[e._v("在我们自己与 Paxos 斗争之后，我们开始着手寻找一个新的共识算法，希望可以为系统开发和教学提供更好的基础。 我们的方法是不寻常的，因为我们的主要目标是可理解性：我们可以设计一个比 Paxos 更适合用于实际工程实现并且更易懂的共识算法吗？")]),e._v(" "),t("p",[e._v("在该算法的设计中，重要的不仅是如何让算法起作用，还要清晰地知道该算法为什么会起作用。")]),e._v(" "),t("p",[e._v("这项工作的结果是一个称为 Raft 的共识性算法。在设计 Raft 时，我们使用了特定的技术来提高它的可理解性，包括：")]),e._v(" "),t("ul",[t("li",[e._v("分解（Raft 分离出三个关键点：leader election、log replication、safety）")]),e._v(" "),t("li",[e._v("减少状态空间（相比于 Paxos，Raft 降低了不确定性的程度和服务器之间的不一致）")])]),e._v(" "),t("p",[e._v("一项针对 2 所大学共 43 名学生的用户研究表明，Raft 比 Paxos 更容易理解：在学习两种算法后，其中 33 名学生能够更好地回答 Raft 的相关问题。")]),e._v(" "),t("p",[e._v("Raft 在许多方面类似于现有的公式算法（尤其是 Oki、Liskov 的 Viewstamped Replication [29,22]），但它有几个新特性：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Strong leader（强领导性）")]),e._v("：相比于其他算法，Raft 使用了更强的领导形式。比如，日志条目只能从 leader 流向 follower（集群中除 leader 外其他的服务器）。这在使 Raft 更易懂的同时简化了日志复制的管理流程。")]),e._v(" "),t("li",[t("strong",[e._v("Leader election（领导选举）")]),e._v("：Raft 使用随机计时器来进行领导选举。任何共识算法都需要心跳机制（heartbeats），Raft 只需要在这个基础上，添加少量机制，就可以简单快速地解决冲突。")]),e._v(" "),t("li",[t("strong",[e._v("Membership changes（成员变更）")]),e._v("：Raft 在更改集群中服务器集的机制中使用了一个**联合共识（joint consensus）**的方法。在联合共识（joint consensus）下，在集群配置的转换过程中，新旧两种配置大多数是重叠的，这使得集群在配置更改期间可以继续正常运行。")])]),e._v(" "),t("p",[e._v("我们认为 Raft 跟 Paxos 以及其他共识算法相比是更优的，这不仅体现在教学方面，还体现在工程实现方面。")]),e._v(" "),t("ul",[t("li",[e._v("它比其他算法更简单且更易于理解")]),e._v(" "),t("li",[e._v("它被描述得十分详细足以满足实际系统的需要")]),e._v(" "),t("li",[e._v("它有多个开源实现，并被多家公司使用")]),e._v(" "),t("li",[e._v("它的安全性已被正式规定和验证")]),e._v(" "),t("li",[e._v("它的效率与其他算法相当")])]),e._v(" "),t("p",[e._v("本文剩余部分：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("所在节")]),e._v(" "),t("th",[e._v("内容")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("第 2 节")]),e._v(" "),t("td",[e._v("复制状态机问题（replicated state machine problem）")])]),e._v(" "),t("tr",[t("td",[e._v("第 3 节")]),e._v(" "),t("td",[e._v("Paxos 的优缺点")])]),e._v(" "),t("tr",[t("td",[e._v("第 4 节")]),e._v(" "),t("td",[e._v("实现 Raft 易理解性的措施")])]),e._v(" "),t("tr",[t("td",[e._v("第 5-8 节")]),e._v(" "),t("td",[e._v("Raft 共识性算法详细阐述")])]),e._v(" "),t("tr",[t("td",[e._v("第 9 节")]),e._v(" "),t("td",[e._v("评估 Raft")])]),e._v(" "),t("tr",[t("td",[e._v("第 10 节")]),e._v(" "),t("td",[e._v("其他相关工作")])])])]),e._v(" "),t("h2",{attrs:{id:"_2-复制状态机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-复制状态机"}},[e._v("#")]),e._v(" 2. 复制状态机")]),e._v(" "),t("p",[e._v("共识算法一般都是在复制状态机 [37] 的背景下实现的。在这种方法下，一组服务器在的状态机计算相同状态的相同副本，即使某些服务器宕机，它们也可以继续运行。")]),e._v(" "),t("p",[e._v("复制状态机是用来解决分布式系统中的各种容错问题。比如说，具有单个 leader 的大规模的系统，如 GFS [8]，HDFS [38] 和 RAMCloud [33] ，他们通常都使用单独的复制状态机来管理 leader election 和保存 leader 崩溃后重新选举所需的配置信息。像 Chubby [2] 和 ZooKeeper [11] 都是复制状态机。")]),e._v(" "),t("p",[e._v("复制状态机通常都是使用日志复制（log replication）来实现。如图1：每个服务器都保存着一份拥有一系列命令的日志，然后服务器上的状态机会按顺序执行日志中的命令。每一份日志中命令相同并且顺序也相同，因此每个状态机可以处理相同的命令序列。所以状态机是可确定的，每个状态机都执行相同的状态和相同的输出序列。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNly1gs8ll0hozyj323i0mg7aw.jpg",alt:"image-20210707191314206"}})]),e._v(" "),t("p",[e._v("共识算法的主要工作就是保证复制日志（replicated log）的一致性。每台服务器上的共识模块接收来自客户端的命令，并将这些命令添加到其日志当中。它（指共识模块）与其他服务器上的共识模块进行通信，以确保每台服务器上最终以相同的顺序包含相同的命令，即使部分服务器宕机了，这个条件也可以满足。一旦命令被正确复制，每台服务器上的状态机就会按日志顺序处理它们，并将输出返回给客户端。这样就形成了高可用的复制状态机。")]),e._v(" "),t("p",[e._v("适用于实际系统的共识算法通常都包含以下几点特征：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("它们确保在所有非拜占庭错误下的安全性，也就是从不返回一个错误的结果。（即使是网络延迟、分区、数据包丢失、数据包重复和数据包乱序）")]),e._v(" "),t("blockquote",[t("p",[t("strong",[t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"}},[e._v("拜占庭错误"),t("OutboundLink")],1),e._v("：")])]),e._v(" "),t("p",[e._v("出现故障（crash 或 fail-stop，即不响应）但不会伪造信息的情况称为“非拜占庭错误”。")]),e._v(" "),t("p",[e._v("伪造信息恶意响应的情况称为“拜占庭错误”，对应节点称为拜占庭节点。")])])]),e._v(" "),t("li",[t("p",[e._v("只要任何大多数（过半）服务器是可运行的，并且可以互相通信和与客户端通信，那么共识算法就可用。假设服务器宕机了，一小段时间后，它们很可能会根据已经稳定存储的状态来进行恢复，并重新加入集群。")])]),e._v(" "),t("li",[t("p",[e._v("它们在保证日志一致性上不依赖于时序：错误的时钟和极端消息延迟在最坏的情况下会产生影响可用性的一系列问题。")])]),e._v(" "),t("li",[t("p",[e._v("在通常情况下，只要集群中大部分（过半）服务器已经响应了单轮远程过程调用（RPC），命令就可以被视为完成。少数（一半以下）慢服务器不会影响整个系统的性能。")])])]),e._v(" "),t("h2",{attrs:{id:"_3-paxos-存在的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-paxos-存在的问题"}},[e._v("#")]),e._v(" 3. Paxos 存在的问题")]),e._v(" "),t("p",[e._v("在过去的十年间，Leslie Lamport 的 Paxos 协议 [15] 几乎成为共识性（consensus）的同义词。它是课堂上被教授最多的共识协议，大多数共识性的实现也是以它为起点。Paxos 首先定义了能在单个决策问题（例如单个复制日志条目）上达成共识的协议。我们将这个子集称为 "),t("em",[e._v("signle-degree Paxos")]),e._v("。然后 Paxos 组合该协议的多个实例去实现一系列决策，比如日志（"),t("em",[e._v("mutil-Paxos")]),e._v("）。Paxos 保证了安全性和活性，它也支持改变集群中的成员，它的安全性也已经被论证了，并且大多数情况下都是高效的。")]),e._v(" "),t("p",[e._v("美中不足的是，Paxos 有两个严重的缺点：")]),e._v(" "),t("ol",[t("li",[t("p",[t("strong",[e._v("Paxos 非常难理解")])]),e._v(" "),t("p",[e._v("众所周知，Paxos 非常晦涩难懂，除非下了很大的功夫，很少有人能够成功理解它。因此，尽管目前已经有几个尝试希望将 Paxos [16,20,21]  解释得通俗易懂一些，而且这些解释都集中在 "),t("code",[e._v("single-decree Paxos")]),e._v("，但是它们还是很难懂。")]),e._v(" "),t("p",[e._v("在对 NSDI 2012 参会者的非正式调查中，我们发现很少人会喜欢 Paxos，即使是经验丰富的研究人员。我们自己也一直在跟 Paxos 作斗争，我们也无法完全理解整个  Paxos 协议，直到阅读了几个更简单的描述和自己设计了替代 Paxos 的协议，我们才对 Paxos 有了比较深刻的理解。但这个过程，花了将近一年。")]),e._v(" "),t("p",[e._v("我们推测 Paxos 这么晦涩难懂，主要是因为作者选择了 "),t("code",[e._v("Single-decree Paxos")]),e._v(" 来作为基础。"),t("code",[e._v("Single-decree Paxso")]),e._v(" 非常搞人：它分为两个阶段，但是并没有对这两个阶段进行简单直观的说明，而且这两个阶段也不能分开了单独理解，所以使用者将就很难理解为什么该算法能起作用。"),t("code",[e._v("Multi-Paxos")]),e._v(" 的合成规则又增加了许多复杂性。我们相信，对多个决定（日志，并非单个日志条目）达成共识的总体问题可以用其他更直接和更明显的方式进行分解。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Paxos 没有为实际实现提供一个良好的基础")])]),e._v(" "),t("p",[e._v("其中一个原因是没有广泛认同的针对 "),t("code",[e._v("Multi-Paxos")]),e._v(" 的算法。Lamport 的描述主要是针对 "),t("code",[e._v("signle-decree Paxos")]),e._v(" 的，他描述了针对 "),t("code",[e._v("multi-Paxos")]),e._v(" 的可能方法，但缺少了很多细节。")]),e._v(" "),t("p",[e._v("目前已经有人在尝试具体化和优化 Paxos，比如 [26]，[39] 和 [13]，但是这些尝试都互不相同并且它们跟 Lamport 描述的也不尽相同。虽然像 Chubby [4] 这样的系统已经实现了类 Paxos（Paxos-like）算法，但是他们并没有透露出很多的实现细节。")])])]),e._v(" "),t("p",[e._v("此外，Paxos 的架构对于构建实际系统来说其实是一个糟糕的设计，这是 "),t("code",[e._v("single-decree Paxos")]),e._v(" 分解的另一个结果。举个例子，这对于独立选择地日志条目的集合，然后再将它们合并到顺序日志当中没有任何好处，这只会增加复杂性。围绕日志来设计系统是更加简单和高效的方法，其中新条目按受约束的顺序依次附加。另外一个问题是 Paxos 在其核心使用了"),t("strong",[e._v("对称对等方法")]),e._v("（尽管它最终表明了这会被用作一种性能优化的弱领导模式）。这在只有一个决策的情况下是有意义的，但是尽管如此，还是很少有实际系统采用了这种方法。如果有一系列的决策需要制定，更简单和更快速的方法应该是首先选择一个 leader，然后由 leader 去协调这些决策。")]),e._v(" "),t("p",[e._v("因此，按照 Paxos 来实现的实际系统往往跟 Paxos 相差很大。几乎所有的实现都是从 Paxos 开始，然后在实现的过程中发现了一系列的难题，在解决难题的过程中，开发出了跟 Paxos 完全不一样的架构。这样既费时又容易出错，而且 Paxos 本身的晦涩难懂又使得问题变得更加严重。Paxos 公式可能是证明其正确性的一个很好的公式，但真正的实现与 Paxos 又相差很大，这证明了它其实没有什么价值。下面来自 Chubby 作者的评论非常典型：")]),e._v(" "),t("blockquote",[t("p",[e._v("在 Paxos 算法描述和现实实现系统之间有着巨大的鸿沟... （如果一直按照 Paxos 算法走下去），最终的系统往往会建立在一个还未被证明的协议之上。")])]),e._v(" "),t("p",[e._v("综合上述问题，我们觉得 Paxos 在教学端和系统构建端都没有提供一个良好的基础。考虑到共识性在大规模软件系统中的重要性，我们决定去尝试一下看看能不能设计一个替代 Paxos 并且具有更好特性的共识算法。Raft 就是这次实验的结果。")]),e._v(" "),t("h2",{attrs:{id:"_4-为可理解性而设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-为可理解性而设计"}},[e._v("#")]),e._v(" 4. 为可理解性而设计")]),e._v(" "),t("p",[e._v("在设计 Raft 算法过程中我们有几个目标：")]),e._v(" "),t("ul",[t("li",[e._v("它必须为系统构建提供一个完整且实际的基础，这样才能大大减少开发者的工作")]),e._v(" "),t("li",[e._v("它必须在任何情况下都是安全的并且在典型的应用条件下是可用的，并且在正常情况下是高效的")])]),e._v(" "),t("p",[e._v("但是我们最重要的目标，也是我们遇到的最大的挑战：")]),e._v(" "),t("ul",[t("li",[e._v("它必须具有易理解性，它必须保证能够被大多数人轻松地理解。而且它必须能够让人形成直观的认识，这样系统构建者才能在实现过程中对它进行不可避免的拓展。")])]),e._v(" "),t("p",[e._v("在设计 Raft 算法的过程中，很多情况下我们需要在多个备选方案下做出抉择。在这种情况下，我们往往会基于可理解性来进行抉择：")]),e._v(" "),t("ul",[t("li",[e._v("解释各个备选方案的难度有多大？例如，它的状态空间有多复杂？它是否具有难以理解的含义？")]),e._v(" "),t("li",[e._v("对于一个读者来说，完成理解这个方案和方案中的各种含义是否简单？")])]),e._v(" "),t("p",[e._v("我们意识到这一的分析具有高度的主观性。所以我们采取了两种通用的措施来解决这个问题。")]),e._v(" "),t("p",[e._v("第一个措施就是众所周知的问题分解：只要有可能，我们就将问题划分成几个相对独立地解决、解释和理解的子问题。例如，Raft 算法被我们划分成 leader 选举、日志复制、安全性和成员变更几个部分。")]),e._v(" "),t("p",[e._v("第二个措施是通过减少状态的数量来简化状态空间，尽可能地使系统变得更加连贯和尽可能地消除不确定性。很明显的一个例子就是，所有的日志都是不允许有空挡的，并且 Raft 限制了日志之间可能不一样的方式。尽管在大多数情况下我们都极力去消除不确定性，但是在某些情况下不确定性却可以提高可理解性。一个重要的例子就是随机化方法，它们虽然引入了不确定性，但是它们往往能够通过以类似的方式处理所有可能的选择来减少状态空间（随便选，没关系）。所有我们使用了随机化来简化 Raft 中的 leader election 算法。")]),e._v(" "),t("h2",{attrs:{id:"_5-raft-共识算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-raft-共识算法"}},[e._v("#")]),e._v(" 5. Raft 共识算法")]),e._v(" "),t("p",[e._v("Raft 是一种用来管理第 2 节中提到的复制日志（replicated log）的算法。图 2 是该算法的浓缩，可以作为参考。图 3 列举了该算法的一些关键特性。这两张图中的内容将会在后面的各个章节中逐一介绍。")]),e._v(" "),t("p",[e._v("Raft 在实现共识算法的过程中，首先选举一个 distinguished leader，然后由该 leader 全权负责复制日志的一致性。Leader 从客户端接收日志条目，然后将这些日志条目复制给其他服务器，并且在保证安全性的情况下通知其他服务器将日志条目应用到他们的状态机中。拥有一个 leader 大大简化了对复制日志的管理流程。例如，leader 可以在不跟其他服务器商议的情况下决定新的日志条目应该存放在日志的什么位置，并且数据都是从 leader 流向其他服务器。当然了，一个 leader 可能会宕机，也可能与其他服务器断开连接，那么这个时候，Raft 就会选举出一个新的 leader 出来。")]),e._v(" "),t("p",[e._v("通过选举一个 leader 的方式，Raft 将共识问题分解成三个独立的子问题，这些问题将会在接下来的子章节中进行讨论：")]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("Leader election（领导选举）")])]),e._v(" "),t("p",[e._v("一个 leader 倒下之后，一定会有一个新的 leader 站起来。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Log replication（日志复制）")])]),e._v(" "),t("p",[e._v("leader 必须接收来自客户端的日志条目然后复制到集群中的其他节点，并且强制其他节点的日志和自己的保持一致。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Safety（安全性）")])]),e._v(" "),t("p",[e._v("Raft 中安全性的关键是图 3 中状态机的安全性：只要有任何服务器节点将一个特定的日志条目应用到它的状态机中，那么其他服务器节点就不能在同一个日志索引位置上存储另外一条不同的指令。第 5.4 节将会描述 Raft 如何保证这种特性，而且该解决方案在 5.2 节描述的选举机制上还增加了额外的限制。")])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNly1gsar1v5rklj32300pc4bj.jpg",alt:"image-20210709155333989"}})]),e._v(" "),t("p",[e._v("在展示了 Raft 共识算法后，本章节将讨论可用性的一些问题以及时序在系统中的所用。")]),e._v(" "),t("h3",{attrs:{id:"_5-1-raft-基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-raft-基础"}},[e._v("#")]),e._v(" 5.1 Raft 基础")]),e._v(" "),t("p",[e._v("一个 Raft 集群中包含若干个服务器节点，"),t("font",{attrs:{color:"green"}},[t("strong",[e._v("5 个一个比较典型的数字，5 个服务器的集群可以容忍 2 个节点的失效")])]),e._v("。在任何一个时刻，集群中的每一个节点都只可能是以下是三种身份之一：")],1),e._v(" "),t("ul",[t("li",[e._v("leader：它会处理所有来自客户端的请求（如果一个客户端和 follower 通信，follower 会将请求重定向到 leader 上）")]),e._v(" "),t("li",[e._v("follower：它们被动的：它们不会发送任何请求，只是简单的响应来自 leader 和 candidate 的请求")]),e._v(" "),t("li",[e._v("candidate：这是用来选举一个新的 leader 的时候出现的一种临时状态，这将在第 5.2 节中详细描述")])]),e._v(" "),t("p",[e._v("在正常情况下，集群中只有一个 leader，然后剩下的节点都是 follower。图 4 展示了这些状态和它们之间的转换关系，这些转换关系将会在接下来进行讨论。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNly1gsap8d6ijjj322s0l47g5.jpg",alt:"image-20210709145034498"}})]),e._v(" "),t("p",[e._v("如图 5 所示，Raft 将时间划分成任意长度的任期（term）。每一段任期从一次选举开始，在这个时候会有一个或者多个 candidate 尝试去成为 leader。如果某一个 candidate 赢得了选举，那么它就会在任期剩下的时间里承担一个 leader 的角色。在某些情况下，一次选举无法选出 leader，这个时候这个任期会以没有 leader 而结束。同时一个新的任期（包含一次新的选举）会很快重新开始。这是因为 Raft 会保证在任意一个任期内，至多有一个 leader。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNly1gsapcmhhi4j31ym0ig78s.jpg",alt:"image-20210709145441879"}})]),e._v(" "),t("p",[e._v("集群中不同的服务器观察到的任期转换的次数也许是不同的，在某些情况下，一个节点可能没有观察到 leader 选举过程甚至是整个任期过程。")]),e._v(" "),t("p",[e._v("任期在 Raft 中还扮演着一个逻辑时钟（logical clock）的角色，这使得服务器可以发现一些过期的信息，比如过时的 leader。")]),e._v(" "),t("p",[e._v("每一个节点都存储着一个当前任期号（current term number），该任期号会随着时间"),t("strong",[e._v("单调递增")]),e._v("。节点之间通信的时候会交换当前任期号，如果一个节点的当前任期号比其他节点小，那么它就将自己的任期号更新为较大的那个值。如果一个 candidate 或者 leader 发现自己的任期号过期了，它就会立刻回到 follower 状态。如果一个节点接收了一个带着过期的任期号的请求，那么它会拒绝这次请求。")]),e._v(" "),t("p",[e._v("Raft 算法中服务器节点之间采用 RPC 进行通信，一般的共识算法都只需要两种类型的 RPC。")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("RequestVote RPCs（请求投票）")]),e._v("：由 candidate 在选举过程中发出（5.2 节中描述）")]),e._v(" "),t("li",[t("strong",[e._v("AppendEntries RPCs（追加条目）")]),e._v("：由 leader 发出，用来做日志复制和提供心跳机制（5.3 节中描述）。")])]),e._v(" "),t("p",[e._v("在第 7 节中为了在节点之间传输快照（snapshot）增加了第三种 RPC。当节点没有及时的收到 RPC 的响应时，会进行重试，而且节点之间都是以并行（parallel）的方式发送 RPC 请求，以此来获得最佳的性能。")]),e._v(" "),t("h3",{attrs:{id:"_5-2-leader-election"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-leader-election"}},[e._v("#")]),e._v(" 5.2 Leader election")]),e._v(" "),t("p",[e._v("Raft 采用一种心跳机制来触发 leader 选举。当服务器启动的时候，他们都会称为 follower。一个服务器节点只要从 candidate 或者 leader 那接收到有效的 RPC 就一直保持 follower 的状态。Leader 会周期性地向所有的 follower 发起心跳来维持自己的 leader 地位，所谓心跳，就是不包含日志条目的 AppendEntries RPC。如果一个 follower 在一段时间内没有收到任何信息（这段时间我们称为"),t("strong",[e._v("选举超时 election timeout")]),e._v("），那么它就会假定目前集群中没有一个可用的 leader，然后开启一次选举来选择一个新的 leader。")]),e._v(" "),t("p",[e._v("开始进行选举的时候，一个 follower 会自增当前任期号然后切换为 candidate 状态。然后它会给自己投票，同时以并行的方式发送一个 RequestVote RPCs 给集群中的其他服务器节点（企图得到它们的投票）。一个 candidate 会一直保持当前状态直到以下的三件事之一发生（这些情况都会在下面的章节里分别讨论）：")]),e._v(" "),t("ul",[t("li",[e._v("它赢得选举，成为了 leader")]),e._v(" "),t("li",[e._v("其他节点赢得了选择，那么它会变成 follower")]),e._v(" "),t("li",[e._v("一段时间之后没有任何节点在选举中胜出")])]),e._v(" "),t("p",[e._v("当一个 candidate 获取集群中过半服务器节点针对同一任期的投票时，它就赢得了这次选举并成为新的 leader。对于同一个任期，每一个服务器节点会按照**先来先服务原则（first-come-first-served）**只投给一个 candidate（在5.4 节会在投票上增加额外的限制）。这种要求获得过半投票才能成为 leader 的规则确保了最多只有一个 candidate 赢得此次选举（图 3 中的选举安全性）。只要有一个 candidate 赢得选举，它就会成为 leader。然后它就会向集群中其他节点发送心跳消息来确定自己的地位并阻止新的选举。")]),e._v(" "),t("p",[e._v("一个 candidate 在等待其他节点给它投票的时候，它也有可能接收到另外一个自称为 leader 的节点给它发过来的 AppendEntries RPC。")]),e._v(" "),t("ul",[t("li",[e._v("如果这个 leader 的任期号（这个任期号会在这次 RPC 中携带着）不小于这个 candidate 的当前任期号，那么这个 candidate 就会觉得这个 leader 是合法的，然后将自己转变为 follower 状态。")]),e._v(" "),t("li",[e._v("如果这个 leader 的任期号小于这个 candidate 的当前热七号，那么这个 candidate 就会拒绝这次 RPC，然后继续保持 candidate 状态。")])]),e._v(" "),t("p",[e._v("第三种可能的结果是 candidate 既没有赢得选举也没有输。可以设想一下这么一个长裤。所有的 follower 同时变成  candidate，然后它们都将票投给自己，那这样就没有 candidate 能得到超过半数的投票了，投票无果。当这种情况发生的时候，每个 candidate 都会进行一次超时响应（time out），然后通过自增任期号来开启一轮新的选举，并启动另一轮的 RequestVote RPCs。然而，如果没有额外的措施，这种无结果的投票可能会无限重复下去。")]),e._v(" "),t("p",[e._v("为了解决上述问题，Raft 采用**随机选举超时时间（randomized election timeouts）**来确保很少发生无果的投票，并且就算发生了也能很快地解决。"),t("strong",[e._v("为了防止选票一开始就被瓜分，选举超时时间是从一个固定的区间（比如，150-300ms）中随机选择。这样可以把服务器分散开来以确保在大多数情况下会只有一个服务器率先结束超时，那么这个时候，它就可以赢得选举并在其他服务器结束超时之前发送心跳")]),e._v("（译者注：乘虚而入，不讲武德）。")]),e._v(" "),t("p",[e._v("同样的机制也可以被用来解决选票被瓜分（split votes）的情况。每个 candidate 在开始一轮选举之前会重置一个随机选举超时时间，然后一直等待直到结束超时状态。这样减少了在一次投票无果后再一次投票无果的可能性。9.3 节展示了该方案能够快速地选出一个 leader。")]),e._v(" "),t("p",[e._v("选举的例子可以很好地展现可理解性是如何指导我们在多种备选设计方案中做出抉择的。在一开始，我们本打算使用一种等级系统（rank system）：每一个 candidate 被赋予一个一次的等级（rank），如果一个 candidate 发现另外一个 candidate 有着更高的登记，那么它就会返回 follower 状态，这样可以使高等级的 candidate 更加容易地赢得下一轮选举。但是我们发现这种方法在可用性方面会有一些小问题：**如果等级较高的服务器宕机了，那么等级较低的服务器可能需要进入超时状态，然后重新成为一个 candidate。如果这种操作出现得太快，那么它可能会重启进程去开启一轮新的选举。**经过我们对该算法做出了多次的调整，我们最终还是认为随机重试的方法更加通俗易懂。")]),e._v(" "),t("h3",{attrs:{id:"_5-3-log-replication"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-log-replication"}},[e._v("#")]),e._v(" 5.3 Log replication")]),e._v(" "),t("p",[e._v("Leader 一旦被选举出来，它就要开始为客户端的请求提供服务了。每一个客户端请求都包含一条将被复制状态机执行的命令。leader 会以一个新条目的方式将该命令追加到自己的日志中，并且以同步的方式向集群中的其他节点发起 AppendEntires RPCs，让它们复制该条目。当条目被安全地复制（何为安全复制，后面会介绍）之后，leader 会将该条目应用到自己的状态机中，状态机执行该指令，然后把执行的结果返回给客户端。如果 follower 宕机了或者运行缓慢，或者网络丢包，leader 会不断地重试 AppendEntiries RPCs（即使已经对客户端作出了响应）直到所有的 follower 都成功存储了所有的日志条目。")]),e._v(" "),t("p",[e._v("日志以图 6 展示的方式组织着。每条日志条目都存储着一条状态机指令和 leader 收到该指定时的任期号。日志条目中的任期号可以用来检测多个日志副本之间是否不一致，以此来保证图 3 中的某些性质。每个日志条目还有一个整数索引值来表明它在日志中的位置。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNly1gsasp7ss8gj32220ssjy9.jpg",alt:"image-20210709165036190"}})]),e._v(" "),t("p",[e._v("那么问题就来了，**leader 什么时候会觉得把日志条目应用到状态机是安全的呢？**这种日志条目被称为已提交的日志条目。Raft 保证这种已提交的日志条目都是持久化的并且最终都会被所有可用的状态机执行。**一旦创建该日志条目的 leader 将它复制到过半的节点上时（比如图 6 中的条目 7），该日志条目就会被提交。**同时，leader 日志中该日志条目之前的所有日志条目也都会被提交，包括由之前的其他 leader 创建的日志条目。5.4 节会讨论在 leader 变更之后应用该规则的一些细节，并证明这种提交的规则是安全的。")]),e._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),t("p",[e._v("[1]  BOLOSKY, W. J., BRADSHAW, D., HAAGENS, R. B., KUSTERS, N. P., AND LI, P. Paxos replicated state machines as the basis of a high-performance data store. In "),t("em",[e._v("Proc. NSDI’11, USENIX Conference on Networked Systems Design and Implementation")]),e._v(" (2011), USENIX, pp. 141–154.")]),e._v(" "),t("p",[e._v("[2]  BURROWS, M. The Chubby lock service for loosely- coupled distributed systems. In "),t("em",[e._v("Proc. OSDI’06, Sympo- sium on Operating Systems Design and Implementation")]),e._v(" (2006), USENIX, pp. 335–350.")]),e._v(" "),t("p",[e._v("[3]  CAMARGOS, L. J., SCHMIDT, R. M., AND PEDONE, F. Multicoordinated Paxos. In "),t("em",[e._v("Proc. PODC’07, ACM Sym- posium on Principles of Distributed Computing")]),e._v(" (2007), ACM, pp. 316–317.")]),e._v(" "),t("p",[e._v("[4]  CHANDRA, T. D., GRIESEMER, R., AND REDSTONE, J. Paxos made live: an engineering perspective. In "),t("em",[e._v("Proc. PODC’07, ACM Symposium on Principles of Distributed Computing")]),e._v(" (2007), ACM, pp. 398–407.")]),e._v(" "),t("p",[e._v("[5]  CHANG, F., DEAN, J., GHEMAWAT, S., HSIEH, W. C., WALLACH, D. A., BURROWS, M., CHANDRA, T., FIKES, A., AND GRUBER, R. E. Bigtable: a distributed storage system for structured data. In "),t("em",[e._v("Proc. OSDI’06, USENIX Symposium on Operating Systems Design and Implementation")]),e._v(" (2006), USENIX, pp. 205–218.")]),e._v(" "),t("p",[e._v("[6]  CORBETT, J. C., DEAN, J., EPSTEIN, M., FIKES, A., FROST, C., FURMAN, J. J., GHEMAWAT, S., GUBAREV, A., HEISER, C., HOCHSCHILD, P., HSIEH, W., KAN- THAK, S., KOGAN, E., LI, H., LLOYD, A., MELNIK, S., MWAURA, D., NAGLE, D., QUINLAN, S., RAO, R., ROLIG, L., SAITO, Y., SZYMANIAK, M., TAYLOR, C., WANG, R., AND WOODFORD, D. Spanner: Google’s globally-distributed database. In "),t("em",[e._v("Proc. OSDI’12, USENIX Conference on Operating Systems Design and Implemen- tation")]),e._v(" (2012), USENIX, pp. 251–264.")]),e._v(" "),t("p",[e._v("[7]  COUSINEAU, D., DOLIGEZ, D., LAMPORT, L., MERZ, S., RICKETTS, D., AND VANZETTO, H. TLA+ proofs. In "),t("em",[e._v("Proc. FM’12, Symposium on Formal Methods")]),e._v(" (2012), D. Giannakopoulou and D. Me ́ry, Eds., vol. 7436 of "),t("em",[e._v("Lec- ture Notes in Computer Science")]),e._v(", Springer, pp. 147–154.")]),e._v(" "),t("p",[e._v("[8]  GHEMAWAT, S., GOBIOFF, H., AND LEUNG, S.-T. The Google file system. In "),t("em",[e._v("Proc. SOSP’03, ACM Symposium on Operating Systems Principles")]),e._v(" (2003), ACM, pp. 29–43.")]),e._v(" "),t("p",[e._v("[9]  GRAY,C.,ANDCHERITON,D.Leases:Anefficientfault- tolerant mechanism for distributed file cache consistency. In "),t("em",[e._v("Proceedings of the 12th ACM Ssymposium on Operating Systems Principles")]),e._v(" (1989), pp. 202–210.")]),e._v(" "),t("p",[e._v("[10]  HERLIHY, M. P., AND WING, J. M. Linearizability: a correctness condition for concurrent objects. "),t("em",[e._v("ACM Trans- actions on Programming Languages and Systems 12")]),e._v(" (July 1990), 463–492.")]),e._v(" "),t("p",[e._v("[11]  HUNT, P., KONAR, M., JUNQUEIRA, F. P., AND REED, B . ZooKeeper: wait-free coordination for internet-scale systems. In "),t("em",[e._v("Proc ATC’10, USENIX Annual Technical Con- ference")]),e._v(" (2010), USENIX, pp. 145–158.")]),e._v(" "),t("p",[e._v("[12]  JUNQUEIRA, F. P., REED, B. C., AND SERAFINI, M. Zab: High-performance broadcast for primary-backup sys- tems. In "),t("em",[e._v("Proc. DSN’11, IEEE/IFIP Int’l Conf. on Depend- able Systems & Networks")]),e._v(" (2011), IEEE Computer Society, pp. 245–256.")]),e._v(" "),t("p",[e._v("[13]  KIRSCH, J., AND AMIR, Y. Paxos for system builders. Tech. Rep. CNDS-2008-2, Johns Hopkins University, 2008.")]),e._v(" "),t("p",[e._v("[14]  L A M P O RT, L . Time, clocks, and the ordering of events in a distributed system. "),t("em",[e._v("Commununications of the ACM 21")]),e._v(", 7 (July 1978), 558–565.")]),e._v(" "),t("p",[e._v("[15]  L A M P O RT, L . The part-time parliament. "),t("em",[e._v("ACM Transac- tions on Computer Systems 16")]),e._v(", 2 (May 1998), 133–169.")]),e._v(" "),t("p",[e._v("[16]  LAMPORT, L. Paxos made simple. "),t("em",[e._v("ACM SIGACT News 32")]),e._v(", 4 (Dec. 2001), 18–25.")]),e._v(" "),t("p",[e._v("[17]  L A M P O RT, L . "),t("em",[e._v("Specifying Systems, The TLA+ Language and Tools for Hardware and Software Engineers")]),e._v(". Addison- Wesley, 2002.")]),e._v(" "),t("p",[e._v("[18]  LAMPORT, L. Generalized consensus and Paxos. Tech. Rep. MSR-TR-2005-33, Microsoft Research, 2005.")]),e._v(" "),t("p",[e._v("[19] L A M P O RT, L . Fast paxos. (2006), 79–103.")]),e._v(" "),t("p",[e._v("[20]  LAMPSON, B. W. How to build a highly available system using consensus. In "),t("em",[e._v("Distributed Algorithms")]),e._v(", O. Baboaglu and K. Marzullo, Eds. Springer-Verlag, 1996, pp. 1–17.")]),e._v(" "),t("p",[e._v("[21]  LAMPSON, B. W. The ABCD’s of Paxos. In "),t("em",[e._v("Proc. PODC’01, ACM Symposium on Principles of Distributed Computing")]),e._v(" (2001), ACM, pp. 13–13.")]),e._v(" "),t("p",[e._v("[22]  LISKOV, B., AND COWLING, J. Viewstamped replica- tion revisited. Tech. Rep. MIT-CSAIL-TR-2012-021, MIT, July 2012.")]),e._v(" "),t("p",[e._v("[23]  LogCabin source code. http://github.com/ logcabin/logcabin.")]),e._v(" "),t("p",[e._v("[24]  LORCH, J. R., ADYA, A., BOLOSKY, W. J., CHAIKEN, R., DOUCEUR, J. R., AND HOWELL, J. The SMART way to migrate replicated stateful services. In "),t("em",[e._v("Proc. Eu- roSys’06, ACM SIGOPS/EuroSys European Conference on Computer Systems")]),e._v(" (2006), ACM, pp. 103–115.")]),e._v(" "),t("p",[e._v("[25]  MAO, Y., JUNQUEIRA, F. P., AND MARZULLO, K. Mencius: building efficient replicated state machines for WANs. In "),t("em",[e._v("Proc. OSDI’08, USENIX Conference on Operating Systems Design and Implementation")]),e._v(" (2008), USENIX, pp. 369–384.")]),e._v(" "),t("p",[e._v("[26] MAZIE` RES, D. Paxos made practical. http://www.scs.stanford.edu/ ̃dm/home/ papers/paxos.pdf, Jan. 2007.")]),e._v(" "),t("p",[e._v("[27]  MORARU, I., ANDERSEN, D. G., AND KAMINSKY, M. There is more consensus in egalitarian parliaments. In "),t("em",[e._v("Proc. SOSP’13, ACM Symposium on Operating System Principles")]),e._v(" (2013), ACM.")]),e._v(" "),t("p",[e._v("[28]  Raft user study. http://ramcloud.stanford. edu/ ̃ongaro/userstudy/.")]),e._v(" "),t("p",[e._v("[29]  OKI, B. M., AND LISKOV, B. H. Viewstamped replication: A new primary copy method to support highly-available distributed systems. In "),t("em",[e._v("Proc. PODC’88, ACM Symposium on Principles of Distributed Computing")]),e._v(" (1988), ACM, pp. 8–17.")]),e._v(" "),t("p",[e._v("[30]  O’NEIL, P., CHENG, E., GAWLICK, D., AND ONEIL, E. The log-structured merge-tree (LSM-tree). "),t("em",[e._v("Acta Informat- ica 33")]),e._v(", 4 (1996), 351–385.")]),e._v(" "),t("p",[e._v("[31]  ONGARO, D. "),t("em",[e._v("Consensus: Bridging Theory and Practice")]),e._v(". PhD thesis, Stanford University, 2014 (work in progress).")]),e._v(" "),t("p",[e._v("[32]  ONGARO, D., AND OUSTERHOUT, J. In search of an understandable consensus algorithm. In "),t("em",[e._v("Proc ATC’14, USENIX Annual Technical Conference")]),e._v(" (2014), USENIX.")]),e._v(" "),t("p",[e._v("[33]  OUSTERHOUT, J., AGRAWAL, P., ERICKSON, D., KOZYRAKIS, C., LEVERICH, J., MAZIE`RES, D., MI- TRA, S., NARAYANAN, A., ONGARO, D., PARULKAR, G., ROSENBLUM, M., RUMBLE, S. M., STRATMANN, E., AND STUTSMAN, R. The case for RAMCloud. "),t("em",[e._v("Com- munications of the ACM 54")]),e._v(" (July 2011), 121–130.")]),e._v(" "),t("p",[e._v("[34]  Raft consensus algorithm website. http://raftconsensus.github.io.")]),e._v(" "),t("p",[e._v("[35]  REED, B. Personal communications, May 17, 2013.")]),e._v(" "),t("p",[e._v("[36]  ROSENBLUM, M., AND OUSTERHOUT, J. K. The design and implementation of a log-structured file system. "),t("em",[e._v("ACM Trans. Comput. Syst. 10")]),e._v(" (February 1992), 26–52.")]),e._v(" "),t("p",[e._v("[37]  S C H N E I D E R , F. B . Implementing fault-tolerant services using the state machine approach: a tutorial. "),t("em",[e._v("ACM Com- puting Surveys 22")]),e._v(", 4 (Dec. 1990), 299–319.")]),e._v(" "),t("p",[e._v("[38]  SHVACHKO, K., KUANG, H., RADIA, S., AND CHANSLER, R. The Hadoop distributed file system. In "),t("em",[e._v("Proc. MSST’10, Symposium on Mass Storage Sys- tems and Technologies")]),e._v(" (2010), IEEE Computer Society, pp. 1–10.")]),e._v(" "),t("p",[e._v("[39]  VAN RENESSE, R. Paxos made moderately complex. Tech. rep., Cornell University, 2012.")])])}),[],!1,null,null,null);a.default=s.exports}}]);